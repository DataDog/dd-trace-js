const { createVulnerability, addVulnerability, sendVulnerabilities } =
  require('../../../src/appsec/iast/vulnerability-reporter')

describe('vulnerability-reporter', () => {
  describe('createVulnerability', () => {
    it('invalid input does not break and creates null vulnerability', () => {
      expect(createVulnerability()).to.be.null
      expect(createVulnerability(null)).to.be.null
      expect(createVulnerability(undefined)).to.be.null
      expect(createVulnerability(null, null)).to.be.null
      expect(createVulnerability(null, undefined)).to.be.null
      expect(createVulnerability(null, null, null)).to.be.null
      expect(createVulnerability(null, null, undefined)).to.be.null
      expect(createVulnerability(null, null, undefined, null)).to.be.null
      expect(createVulnerability(null, null, undefined, undefined)).to.be.null
      expect(createVulnerability('WEAK_HASHING', null, undefined, undefined)).to.be.null
      expect(createVulnerability('WEAK_HASHING', {}, undefined, undefined)).to.be.null
      expect(createVulnerability('WEAK_HASHING', {}, undefined, {})).to.be.null
    })

    it('creates the object with all properties', () => {
      const type = 'WEAK_HASHING'
      const evidence = { value: 'md5' }
      const location = { path: 'file-name.js', line: 15 }
      const spanId = 888
      const vulnerability = createVulnerability(type, evidence, spanId, location)
      expect(vulnerability).not.to.be.null
      expect(vulnerability.type).to.be.equal(type)
      expect(vulnerability.evidence).to.be.equal(evidence)
      expect(vulnerability.location.path).to.be.equal(location.path)
      expect(vulnerability.location.line).to.be.equal(location.line)
      expect(vulnerability.location.spanId).to.be.equal(spanId)
    })

    it('creates the object without location', () => {
      const type = 'WEAK_HASHING'
      const evidence = { value: 'md5' }
      const spanId = 888
      const vulnerability = createVulnerability(type, evidence, spanId)
      expect(vulnerability).not.to.be.null
      expect(vulnerability.type).to.be.equal(type)
      expect(vulnerability.evidence).to.be.equal(evidence)
      expect(vulnerability.location.path).to.be.undefined
      expect(vulnerability.location.line).to.be.undefined
      expect(vulnerability.location.spanId).to.be.equal(spanId)
    })
  })

  describe('addVulnerability', () => {
    it('should not break with invalid input', () => {
      addVulnerability()
      addVulnerability(null, null)
      addVulnerability(undefined, undefined)
      addVulnerability(null, {})
      addVulnerability({}, null)
      addVulnerability({}, undefined)
      addVulnerability({})
    })

    it('should not add null vulnerability', () => {
      const iastContext = {}
      addVulnerability(iastContext, null)
      expect(iastContext).not.to.have.property('vulnerabilities')
      iastContext.vulnerabilities = []
      addVulnerability(iastContext, undefined)
      expect(iastContext.vulnerabilities).to.have.length(0)
    })

    it('should create vulnerability array if it does not exist', () => {
      const iastContext = {}
      addVulnerability(iastContext, createVulnerability('INSECURE_HASHING', { value: 'sha1' }, 888))
      expect(iastContext).to.have.property('vulnerabilities')
      expect(iastContext.vulnerabilities).to.be.an('array')
    })

    it('should add multiple vulnerabilities', () => {
      const iastContext = {}
      addVulnerability(iastContext, createVulnerability('INSECURE_HASHING', { value: 'sha1' }, -555))
      addVulnerability(iastContext, createVulnerability('INSECURE_HASHING', { value: 'sha1' }, 888))
      addVulnerability(iastContext, createVulnerability('INSECURE_HASHING', { value: 'sha1' }, 123))
      expect(iastContext.vulnerabilities).to.have.length(3)
    })

    it('should add in the context evidence properties', () => {
      const iastContext = {}
      addVulnerability(iastContext, createVulnerability('INSECURE_HASHING', { value: 'sha1' }, 888))
      addVulnerability(iastContext, createVulnerability('INSECURE_HASHING', { value: 'md5' },
        -123, { path: 'path.js', line: 12 }))
      expect(iastContext.vulnerabilities).to.have.length(2)
      expect(iastContext).to.have.nested.property('vulnerabilities.0.type', 'INSECURE_HASHING')
      expect(iastContext).to.have.nested.property('vulnerabilities.0.evidence.value', 'sha1')
      expect(iastContext).to.have.nested.property('vulnerabilities.0.location.spanId', 888)
      expect(iastContext).to.have.nested.property('vulnerabilities.1.type', 'INSECURE_HASHING')
      expect(iastContext).to.have.nested.property('vulnerabilities.1.evidence.value', 'md5')
      expect(iastContext).to.have.nested.property('vulnerabilities.1.location.spanId', -123)
      expect(iastContext).to.have.nested.property('vulnerabilities.1.location.path', 'path.js')
      expect(iastContext).to.have.nested.property('vulnerabilities.1.location.line', 12)
    })
  })

  describe('sendVulnerabilities', () => {
    let span

    beforeEach(() => {
      span = {
        addTags: sinon.stub()
      }
    })
    afterEach(() => {
      sinon.restore()
    })

    it('should not fail with invalid parameters', () => {
      sendVulnerabilities()
      sendVulnerabilities(null)
      sendVulnerabilities(undefined)
      sendVulnerabilities(-15)
      sendVulnerabilities({})
    })

    it('should not send vulnerability with empty context', () => {
      sendVulnerabilities({ rootSpan: span })
      expect(span.addTags).not.to.have.been.called
    })

    it('should not send invalid vulnerability', () => {
      sendVulnerabilities({ vulnerabilities: [{ invalid: 'vulnerability' }], rootSpan: span })
      expect(span.addTags).not.to.have.been.called
    })

    it('should send one with one vulnerability', () => {
      const iastContext = { rootSpan: span }
      addVulnerability(iastContext, createVulnerability('INSECURE_HASHING', { value: 'sha1' }, 888))
      sendVulnerabilities(iastContext)
      expect(span.addTags).to.have.been.calledOnceWithExactly({
        'manual.keep': 'true',
        '_dd.iast.json': '{"vulnerabilities":[{"type":"INSECURE_HASHING","hash":3254801297,' +
          '"evidence":{"value":"sha1"},"location":{"spanId":888}}]}'
      })
    })

    it('should send only valid vulnerabilities', () => {
      const iastContext = { rootSpan: span }
      addVulnerability(iastContext, createVulnerability('INSECURE_HASHING', { value: 'sha1' }, 888))
      iastContext.vulnerabilities.push({ invalid: 'vulnerability' })
      sendVulnerabilities(iastContext)
      expect(span.addTags).to.have.been.calledOnceWithExactly({
        'manual.keep': 'true',
        '_dd.iast.json': '{"vulnerabilities":[{"type":"INSECURE_HASHING","hash":3254801297,' +
          '"evidence":{"value":"sha1"},"location":{"spanId":888}}]}'
      })
    })

    it('should send once with multiple vulnerabilities', () => {
      const iastContext = { rootSpan: span }
      addVulnerability(iastContext, createVulnerability('INSECURE_HASHING', { value: 'sha1' }, 888,
        { path: '/path/to/file1.js', line: 1 }))
      addVulnerability(iastContext, createVulnerability('INSECURE_HASHING', { value: 'md5' }, 1,
        { path: '/path/to/file2.js', line: 1 }))
      addVulnerability(iastContext, createVulnerability('INSECURE_HASHING', { value: 'md5' }, -5,
        { path: '/path/to/file3.js', line: 3 }))
      sendVulnerabilities(iastContext)
      expect(span.addTags).to.have.been.calledOnceWithExactly({
        'manual.keep': 'true',
        '_dd.iast.json': '{"vulnerabilities":[' +
          '{"type":"INSECURE_HASHING","hash":1697980169,"evidence":{"value":"sha1"},' +
            '"location":{"spanId":888,"path":"/path/to/file1.js","line":1}},' +
          '{"type":"INSECURE_HASHING","hash":1726609320,"evidence":{"value":"md5"},' +
            '"location":{"spanId":1,"path":"/path/to/file2.js","line":1}},' +
          '{"type":"INSECURE_HASHING","hash":1755238473,"evidence":{"value":"md5"},' +
            '"location":{"spanId":-5,"path":"/path/to/file3.js","line":3}}]}'
      })
    })

    it('should send once vulnerability with one vulnerability', () => {
      const iastContext = { rootSpan: span }
      addVulnerability(iastContext, createVulnerability('INSECURE_HASHING', { value: 'sha1' }, 888,
        { path: 'filename.js', line: 88 }))
      sendVulnerabilities(iastContext)
      expect(span.addTags).to.have.been.calledOnceWithExactly({
        'manual.keep': 'true',
        '_dd.iast.json': '{"vulnerabilities":[{"type":"INSECURE_HASHING","hash":3410512691,' +
          '"evidence":{"value":"sha1"},"location":{"spanId":888,"path":"filename.js","line":88}}]}'
      })
    })

    it('should not send duplicated vulnerabilities', () => {
      const iastContext = { rootSpan: span }
      addVulnerability(iastContext, createVulnerability('INSECURE_HASHING', { value: 'sha1' }, 888,
        { path: 'filename.js', line: 88 }))
      addVulnerability(iastContext, createVulnerability('INSECURE_HASHING', { value: 'sha1' }, 888,
        { path: 'filename.js', line: 88 }))
      sendVulnerabilities(iastContext)
      expect(span.addTags).to.have.been.calledOnceWithExactly({
        'manual.keep': 'true',
        '_dd.iast.json': '{"vulnerabilities":[{"type":"INSECURE_HASHING","hash":3410512691,' +
          '"evidence":{"value":"sha1"},"location":{"spanId":888,"path":"filename.js","line":88}}]}'
      })
    })
  })
})
