'use strict'

const { expect } = require('chai')
const proxyquire = require('proxyquire')

describe('vulnerability-analyzer', () => {
  const VULNERABLE_VALUE = 'VULNERABLE_VALUE'
  const VULNERABILITY = 'VULNERABILITY'
  const VULNERABILITY_LOCATION = { file: 'VULNERABILITY_LOCATION', line: 11 }
  const ANALYZER_TYPE = 'TEST_ANALYZER'
  const SPAN_ID = '123456'

  let VulnerabilityAnalyzer
  let vulnerabilityReporter
  let overheadController
  let pathLine
  let iastContextHandler
  beforeEach(() => {
    vulnerabilityReporter = {
      createVulnerability: sinon.stub().returns(VULNERABILITY),
      addVulnerability: sinon.stub()
    }
    pathLine = {
      getFirstNonDDPathAndLine: sinon.stub().returns(VULNERABILITY_LOCATION)
    }
    overheadController = {
      hasQuota: sinon.stub()
    }
    iastContextHandler = {
      getIastContext: sinon.stub()
    }
    VulnerabilityAnalyzer = proxyquire('../../../../src/appsec/iast/analyzers/vulnerability-analyzer', {
      '../vulnerability-reporter': vulnerabilityReporter,
      '../path-line': pathLine,
      '../overhead-controller': overheadController,
      '../iast-context': iastContextHandler
    })
  })
  afterEach(() => {
    sinon.restore()
  })

  const shouldReportCasesData = [
    {
      iastContext: {},
      oceResult: true,
      isVulnerable: true,
      reported: true
    },
    {
      iastContext: {},
      oceResult: false,
      isVulnerable: false,
      reported: false
    },
    {
      iastContext: {},
      oceResult: false,
      isVulnerable: true,
      reported: false
    },
    {
      iastContext: {},
      oceResult: true,
      isVulnerable: false,
      reported: false
    },
    {
      iastContext: undefined,
      oceResult: true,
      isVulnerable: true,
      reported: true
    }
  ]
  shouldReportCasesData.forEach((shouldReportCaseData) => {
    it(`should ${shouldReportCaseData.reported ? 'report' : 'not report'} vulnerability
    when value is ${shouldReportCaseData.isVulnerable ? 'vulnerable' : 'not vulnerable'},
    OCE ${shouldReportCaseData.oceResult ? 'allows' : 'rejects'} the operation
    and iastContext is ${shouldReportCaseData.iastContext ? 'provided' : 'not provided'}`, () => {
      const vulnerabilityAnalyzer = new VulnerabilityAnalyzer(ANALYZER_TYPE)
      overheadController.hasQuota.returns(shouldReportCaseData.oceResult)
      iastContextHandler.getIastContext.returns(shouldReportCaseData.iastContext)
      sinon.stub(vulnerabilityAnalyzer, '_isVulnerable').returns(shouldReportCaseData.isVulnerable)
      sinon.stub(vulnerabilityAnalyzer, '_report')
      vulnerabilityAnalyzer.analyze(VULNERABLE_VALUE)
      if (shouldReportCaseData.reported) {
        expect(vulnerabilityAnalyzer._report).to.have.been.calledOnce
      } else {
        expect(vulnerabilityAnalyzer._report).not.to.be.called
      }
    })
  })

  it('should return not vulnerable if not override', () => {
    const vulnerabilityAnalyzer = new VulnerabilityAnalyzer(ANALYZER_TYPE)
    const isVulnerable = vulnerabilityAnalyzer._isVulnerable()
    expect(isVulnerable).to.be.false
  })

  it('should add vulnerability to reporter when reporting', () => {
    const vulnerabilityAnalyzer = new VulnerabilityAnalyzer(ANALYZER_TYPE)
    const context = {
      rootSpan: {
        context: sinon.mock().returns({
          toSpanId: sinon.mock().returns(SPAN_ID)
        })
      }
    }
    vulnerabilityAnalyzer._report(VULNERABLE_VALUE, context)
    expect(vulnerabilityReporter.addVulnerability).to.have.been.calledOnceWithExactly(
      context,
      {
        type: 'TEST_ANALYZER',
        evidence: {
          value: 'VULNERABLE_VALUE'
        },
        location: {
          spanId: '123456',
          file: 'VULNERABILITY_LOCATION',
          line: 11
        },
        hash: -1016751375
      }
    )
  })

  it('should wrap subscription handler and catch thrown Errors', () => {
    const vulnerabilityAnalyzer = new VulnerabilityAnalyzer(ANALYZER_TYPE)
    const handler = sinon.spy(() => {
      throw new Error('handler Error')
    })
    const wrapped = vulnerabilityAnalyzer._wrapHandler(handler)

    expect(typeof wrapped).to.be.equal('function')
    const message = {}
    const name = 'test'
    expect(() => wrapped(message, name)).to.not.throw()
    expect(handler).to.be.calledOnceWithExactly(message, name)
  })

  it('should catch thrown Errors inside subscription handlers', () => {
    const vulnerabilityAnalyzer = new VulnerabilityAnalyzer(ANALYZER_TYPE)
    vulnerabilityAnalyzer.addSub('dd-trace:test:error:sub', () => {
      throw new Error('handler Error')
    })

    expect(vulnerabilityAnalyzer._subscriptions).to.have.lengthOf(1)
    vulnerabilityAnalyzer._subscriptions[0].enable()

    const dc = require('../../../../../diagnostics_channel')
    expect(() => { dc.channel('dd-trace:test:error:sub').publish({}) }).to.not.throw()
  })

  describe('createVulnerability', () => {
    let vulnerabilityAnalyzer

    beforeEach(() => {
      vulnerabilityAnalyzer = new VulnerabilityAnalyzer(ANALYZER_TYPE)
    })

    it('invalid input does not break and creates null vulnerability', () => {
      expect(vulnerabilityAnalyzer._createVulnerability()).to.be.null
      expect(vulnerabilityAnalyzer._createVulnerability(null)).to.be.null
      expect(vulnerabilityAnalyzer._createVulnerability(undefined)).to.be.null
      expect(vulnerabilityAnalyzer._createVulnerability(null, null)).to.be.null
      expect(vulnerabilityAnalyzer._createVulnerability(null, undefined)).to.be.null
      expect(vulnerabilityAnalyzer._createVulnerability(null, null, null)).to.be.null
      expect(vulnerabilityAnalyzer._createVulnerability(null, null, undefined)).to.be.null
      expect(vulnerabilityAnalyzer._createVulnerability(null, null, undefined, null)).to.be.null
      expect(vulnerabilityAnalyzer._createVulnerability(null, null, undefined, undefined)).to.be.null
      expect(vulnerabilityAnalyzer._createVulnerability('WEAK_HASHING', null, undefined, undefined)).to.be.null
    })

    it('creates the object with all properties', () => {
      const type = 'WEAK_HASHING'
      const evidence = { value: 'md5' }
      const location = { path: 'file-name.js', line: 15 }
      const spanId = 888
      const vulnerability = vulnerabilityAnalyzer._createVulnerability(type, evidence, spanId, location)
      expect(vulnerability).not.to.be.null
      expect(vulnerability.type).to.be.equal(type)
      expect(vulnerability.evidence).to.be.equal(evidence)
      expect(vulnerability.location.path).to.be.equal(location.path)
      expect(vulnerability.location.line).to.be.equal(location.line)
      expect(vulnerability.location.spanId).to.be.equal(spanId)
    })

    it('creates the object without location', () => {
      const type = 'WEAK_HASHING'
      const evidence = { value: 'md5' }
      const spanId = 888
      const vulnerability = vulnerabilityAnalyzer._createVulnerability(type, evidence, spanId)
      expect(vulnerability).not.to.be.null
      expect(vulnerability.type).to.be.equal(type)
      expect(vulnerability.evidence).to.be.equal(evidence)
      expect(vulnerability.location.path).to.be.undefined
      expect(vulnerability.location.line).to.be.undefined
      expect(vulnerability.location.spanId).to.be.equal(spanId)
    })

    it('creates the object without spanId', () => {
      const type = 'WEAK_HASHING'
      const evidence = { value: 'md5' }
      const location = { path: 'file-name.js', line: 15 }
      const vulnerability = vulnerabilityAnalyzer._createVulnerability(type, evidence, undefined, location)
      expect(vulnerability).not.to.be.null
      expect(vulnerability.type).to.be.equal(type)
      expect(vulnerability.evidence).to.be.equal(evidence)
      expect(vulnerability.location.path).to.be.equal(location.path)
      expect(vulnerability.location.line).to.be.equal(location.line)
      expect(vulnerability.location.spanId).to.be.equal(0)
    })
  })
})
