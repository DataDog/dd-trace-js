'use strict'

const proxyquire = require('proxyquire')

describe('vulnerability-analyzer', () => {
  const VULNERABLE_VALUE = 'VULNERABLE_VALUE'
  const VULNERABILITY = 'VULNERABILITY'
  const VULNERABILITY_LOCATION = 'VULNERABILITY_LOCATION'
  const ANALYZER_TYPE = 'TEST_ANALYZER'
  const SPAN_ID = '123456'

  let VulnerabilityAnalyzer
  let vulnerabilityReporter
  let overheadController
  let pathLine
  let iastContextHandler
  beforeEach(() => {
    vulnerabilityReporter = {
      createVulnerability: sinon.stub().returns(VULNERABILITY),
      addVulnerability: sinon.stub()
    }
    pathLine = {
      getFirstNonDDPathAndLine: sinon.stub().returns(VULNERABILITY_LOCATION)
    }
    overheadController = {
      hasQuota: sinon.stub()
    }
    iastContextHandler = {
      getIastContext: sinon.stub()
    }
    VulnerabilityAnalyzer = proxyquire('../../../../src/appsec/iast/analyzers/vulnerability-analyzer', {
      '../vulnerability-reporter': vulnerabilityReporter,
      '../path-line': pathLine,
      '../overhead-controller': overheadController,
      '../iast-context': iastContextHandler
    })
  })
  afterEach(() => {
    sinon.restore()
  })

  const shouldReportCasesData = [
    {
      iastContext: {},
      oceResult: true,
      isVulnerable: true,
      reported: true
    },
    {
      iastContext: {},
      oceResult: false,
      isVulnerable: false,
      reported: false
    },
    {
      iastContext: {},
      oceResult: false,
      isVulnerable: true,
      reported: false
    },
    {
      iastContext: {},
      oceResult: true,
      isVulnerable: false,
      reported: false
    },
    {
      iastContext: undefined,
      oceResult: true,
      isVulnerable: true,
      reported: false
    }
  ]
  shouldReportCasesData.forEach((shouldReportCaseData) => {
    it(`should ${shouldReportCaseData.reported ? 'report' : 'not report'} vulnerability
    when value is ${shouldReportCaseData.isVulnerable ? 'vulnerable' : 'not vulnerable'},
    OCE ${shouldReportCaseData.oceResult ? 'allows' : 'rejects'} the operation
    and iastContext is ${shouldReportCaseData.iastContext ? 'provided' : 'not provided'}`, () => {
      const vulnerabilityAnalyzer = new VulnerabilityAnalyzer(ANALYZER_TYPE)
      overheadController.hasQuota.returns(shouldReportCaseData.oceResult)
      iastContextHandler.getIastContext.returns(shouldReportCaseData.iastContext)
      sinon.stub(vulnerabilityAnalyzer, '_isVulnerable').returns(shouldReportCaseData.isVulnerable)
      vulnerabilityAnalyzer.analyze(VULNERABLE_VALUE)
      if (shouldReportCaseData.reported) {
        expect(vulnerabilityReporter.addVulnerability).to.have.been.calledOnce
      } else {
        expect(vulnerabilityReporter.addVulnerability).not.to.be.called
      }
    })
  })

  it('should return not vulnerable if not override', () => {
    const vulnerabilityAnalyzer = new VulnerabilityAnalyzer(ANALYZER_TYPE)
    const isVulnerable = vulnerabilityAnalyzer._isVulnerable()
    expect(isVulnerable).to.be.false
  })

  it('should create vulnerability to reporter when reporting', () => {
    const vulnerabilityAnalyzer = new VulnerabilityAnalyzer(ANALYZER_TYPE)
    const context = {
      rootSpan: {
        context: sinon.mock().returns({
          toSpanId: sinon.mock().returns(SPAN_ID)
        })
      }
    }
    overheadController.hasQuota.returns(true)
    vulnerabilityAnalyzer._report(VULNERABLE_VALUE, context)
    expect(vulnerabilityReporter.createVulnerability).to.have.been.calledOnceWithExactly(
      ANALYZER_TYPE,
      { value: VULNERABLE_VALUE },
      SPAN_ID,
      VULNERABILITY_LOCATION
    )
  })

  it('should add vulnerability to reporter when reporting', () => {
    const vulnerabilityAnalyzer = new VulnerabilityAnalyzer(ANALYZER_TYPE)
    const context = {
      rootSpan: {
        context: sinon.mock().returns({
          toSpanId: sinon.mock().returns(SPAN_ID)
        })
      }
    }
    overheadController.hasQuota.returns(true)
    vulnerabilityAnalyzer._report(VULNERABLE_VALUE, context)
    expect(vulnerabilityReporter.addVulnerability).to.have.been.calledOnceWithExactly(
      context,
      VULNERABILITY
    )
  })
})
