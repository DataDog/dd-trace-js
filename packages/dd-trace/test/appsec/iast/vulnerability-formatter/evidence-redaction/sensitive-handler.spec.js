'use strict'

const sensitiveHandler =
  require('../../../../../src/appsec/iast/vulnerabilities-formatter/evidence-redaction/sensitive-handler')
const { DEFAULT_IAST_REDACTION_NAME_PATTERN, DEFAULT_IAST_REDACTION_VALUE_PATTERN } =
  require('../../../../../src/appsec/iast/vulnerabilities-formatter/evidence-redaction/sensitive-regex')

const { suite } = require('../resources/evidence-redaction-suite.json')

function doTest (testCase, parameter) {
  const description = testCase.description.split(parameter.name).join(parameter.value)
  const input = JSON.parse(JSON.stringify(testCase.input).split(parameter.name).join(parameter.value))

  it(description, () => {
    input.forEach(source => {
      const result = sensitiveHandler.isSensibleSource(source)
      expect(result).to.be.true
    })
  })
}

describe('Sensitive handler', () => {
  beforeEach(() => {
    sensitiveHandler.setRedactionPatterns(DEFAULT_IAST_REDACTION_NAME_PATTERN, DEFAULT_IAST_REDACTION_VALUE_PATTERN)
  })

  describe('Custom redaction patterns', () => {
    describe('Default redaction patterns', () => {
      it('should use default patterns when null ones are set', () => {
        sensitiveHandler.setRedactionPatterns(null, null)
        expect(sensitiveHandler._namePattern.source).to.be.equals(DEFAULT_IAST_REDACTION_NAME_PATTERN)
        expect(sensitiveHandler._valuePattern.source).to.be.equals(DEFAULT_IAST_REDACTION_VALUE_PATTERN)
      })

      it('should use default name pattern when custom name pattern is null', () => {
        const customValuePattern = 'valuePattern'
        sensitiveHandler.setRedactionPatterns(null, customValuePattern)
        expect(sensitiveHandler._namePattern.source).to.be.equals(DEFAULT_IAST_REDACTION_NAME_PATTERN)
        expect(sensitiveHandler._valuePattern.source).to.be.equals(customValuePattern)
      })

      it('should use default value pattern when custom value pattern is null', () => {
        const customNamePattern = 'namePattern'
        sensitiveHandler.setRedactionPatterns(customNamePattern, null)
        expect(sensitiveHandler._namePattern.source).to.be.equals(customNamePattern)
        expect(sensitiveHandler._valuePattern.source).to.be.equals(DEFAULT_IAST_REDACTION_VALUE_PATTERN)
      })
    })

    describe('Not valid custom patterns', () => {
      const iastLog = require('../../../../../src/appsec/iast/iast-log')

      beforeEach(() => {
        sinon.stub(iastLog, 'warn')
      })

      afterEach(() => {
        sinon.restore()
      })

      it('should use default patterns when not valid ones are set', () => {
        sensitiveHandler.setRedactionPatterns('(unterminated_group', 'unmatched)')
        expect(sensitiveHandler._namePattern.source).to.be.equals(DEFAULT_IAST_REDACTION_NAME_PATTERN)
        expect(sensitiveHandler._valuePattern.source).to.be.equals(DEFAULT_IAST_REDACTION_VALUE_PATTERN)

        expect(iastLog.warn).to.have.been.calledTwice
        expect(iastLog.warn.firstCall.args[0]).to.be.equals('Redaction name pattern is not valid')
        expect(iastLog.warn.secondCall.args[0]).to.be.equals('Redaction value pattern is not valid')
      })

      it('should use default name pattern when custom name pattern is not valid', () => {
        const customValuePattern = 'valuePattern'
        sensitiveHandler.setRedactionPatterns('(unterminated_group', customValuePattern)
        expect(sensitiveHandler._namePattern.source).to.be.equals(DEFAULT_IAST_REDACTION_NAME_PATTERN)
        expect(sensitiveHandler._valuePattern.source).to.be.equals(customValuePattern)

        expect(iastLog.warn).to.have.been.calledOnceWithExactly('Redaction name pattern is not valid')
      })

      it('should use default value pattern when custom value pattern is not valid', () => {
        const customNamePattern = 'namePattern'
        sensitiveHandler.setRedactionPatterns(customNamePattern, 'unmatched)')
        expect(sensitiveHandler._namePattern.source).to.be.equals(customNamePattern)
        expect(sensitiveHandler._valuePattern.source).to.be.equals(DEFAULT_IAST_REDACTION_VALUE_PATTERN)

        expect(iastLog.warn).to.have.been.calledOnceWithExactly('Redaction value pattern is not valid')
      })
    })

    it('Valid custom patterns', () => {
      expect(sensitiveHandler.isSensibleName('sensibleName')).to.be.false
      expect(sensitiveHandler.isSensibleValue('sensibleValue')).to.be.false

      sensitiveHandler.setRedactionPatterns('sensibleName', 'sensibleValue')

      expect(sensitiveHandler.isSensibleName('sensibleName')).to.be.true
      expect(sensitiveHandler.isSensibleValue('sensibleValue')).to.be.true
    })
  })

  describe('Sensible sources', () => {
    suite.filter(testCase => testCase.type === 'SOURCES').forEach((testCase) => {
      for (const name in testCase.parameters) {
        testCase.parameters[name].forEach(value => {
          doTest(testCase, { name, value })
        })
      }
    })
  })
})
