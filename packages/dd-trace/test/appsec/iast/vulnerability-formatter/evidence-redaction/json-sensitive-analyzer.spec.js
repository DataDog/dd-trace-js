'use strict'

// eslint-disable-next-line max-len
const JsonSensitiveAnalyzer = require('../../../../../src/appsec/iast/vulnerabilities-formatter/evidence-redaction/sensitive-analyzers/json-sensitive-analyzer')

describe('JsonSensitiveAnalizer', () => {
  describe('_getKeysAndValuesIndexLists', () => {
    let jsonSensitiveAnalyzer
    beforeEach(() => {
      jsonSensitiveAnalyzer = new JsonSensitiveAnalyzer()
    })

    it('json object with string value', () => {
      const jsonString = '{"key":"value"}'
      const indexes = jsonSensitiveAnalyzer._getKeysAndValuesIndexLists(jsonString)

      expect(indexes.keys).to.be.deep.equal([
        { start: 2, end: 5 }
      ])

      expect(indexes.values).to.be.deep.equal([
        { start: 8, end: 13 }
      ])
    })

    it('json object with string value and quotes in the key', () => {
      const jsonString = '{"ke\\"y":"value"}'
      const indexes = jsonSensitiveAnalyzer._getKeysAndValuesIndexLists(jsonString)

      expect(indexes.keys).to.be.deep.equal([
        { start: 2, end: 7 }
      ])

      expect(indexes.values).to.be.deep.equal([
        { start: 10, end: 15 }
      ])
    })

    it('json object with string value and quotes in the value', () => {
      const jsonString = '{"key":"val\\"ue"}'
      const indexes = jsonSensitiveAnalyzer._getKeysAndValuesIndexLists(jsonString)



      expect(indexes.keys).to.be.deep.equal([
        { start: 2, end: 5 }
      ])

      expect(indexes.values).to.be.deep.equal([
        { start: 8, end: 15 }
      ])
    })

    it('json object with int value', () => {
      const jsonString = '{"key":1234}'

      const indexes = jsonSensitiveAnalyzer._getKeysAndValuesIndexLists(jsonString)

      expect(indexes.keys).to.be.deep.equal([
        { start: 2, end: 5 }
      ])

      expect(indexes.values).to.be.deep.equal([
        { start: 7, end: 11 }
      ])
    })

    it('json object with double value', () => {
      const jsonString = '{"key":12.23}'

      const indexes = jsonSensitiveAnalyzer._getKeysAndValuesIndexLists(jsonString)

      expect(indexes.keys).to.be.deep.equal([
        { start: 2, end: 5 }
      ])

      expect(indexes.values).to.be.deep.equal([
        { start: 7, end: 12 }
      ])
    })

    it('json object with false value', () => {
      const jsonString = '{"key":false}'

      const indexes = jsonSensitiveAnalyzer._getKeysAndValuesIndexLists(jsonString)

      expect(indexes.keys).to.be.deep.equal([
        { start: 2, end: 5 }
      ])

      expect(indexes.values).to.be.deep.equal([
        { start: 7, end: 12 }
      ])
    })

    it('json object with true value', () => {
      const jsonString = '{"key":true}'

      const indexes = jsonSensitiveAnalyzer._getKeysAndValuesIndexLists(jsonString)

      expect(indexes.keys).to.be.deep.equal([
        { start: 2, end: 5 }
      ])

      expect(indexes.values).to.be.deep.equal([
        { start: 7, end: 11 }
      ])
    })

    it('json object with null value', () => {
      const jsonString = '{"key":null}'

      const indexes = jsonSensitiveAnalyzer._getKeysAndValuesIndexLists(jsonString)

      expect(indexes.keys).to.be.deep.equal([
        { start: 2, end: 5 }
      ])

      expect(indexes.values).to.be.deep.equal([
        { start: 7, end: 11 }
      ])
    })

    it('json object with nested objects', () => {
      const jsonString = '{"firstKey":{"nested1":{"nested2":"abc","nested3":123,"nested4":null},"nested5":false},' +
        '"secondKey":"test"}'

      const indexes = jsonSensitiveAnalyzer._getKeysAndValuesIndexLists(jsonString)

      expect(indexes.keys).to.be.deep.equal([
        { start: 2, end: 10 },
        { start: 14, end: 21 },
        { start: 25, end: 32 },
        { start: 41, end: 48 },
        { start: 55, end: 62 },
        { start: 71, end: 78 },
        { start: 88, end: 97 }
      ])

      expect(indexes.values).to.be.deep.equal([
        { start: 35, end: 38 },
        { start: 50, end: 53 },
        { start: 64, end: 68 },
        { start: 80, end: 85 },
        { start: 100, end: 104 }
      ])
    })

    it('json object with nested arrays and objects', () => {
      const jsonString = '{"firstKey":{"nested1":["value",123,false],"nested2":"123"},"secondKey":"123","thirdKey":' +
        '["one",{"nestedInArray":"abc","extraArray":[1,2,"test"]}]}'

      const indexes = jsonSensitiveAnalyzer._getKeysAndValuesIndexLists(jsonString)

      expect(indexes.keys).to.be.deep.equal([
        { start: 2, end: 10 },
        { start: 14, end: 21 },
        { start: 44, end: 51 },
        { start: 61, end: 70 },
        { start: 79, end: 87 },
        { start: 98, end: 111 },
        { start: 120, end: 130 }
      ])

      expect(indexes.values).to.be.deep.equal([
        { start: 25, end: 30 },
        { start: 32, end: 35 },
        { start: 36, end: 41 },
        { start: 54, end: 57 },
        { start: 73, end: 76 },
        { start: 91, end: 94 },
        { start: 114, end: 117 },
        { start: 133, end: 134 },
        { start: 135, end: 136 },
        { start: 138, end: 142 }
      ])
    })

    it('json array with 1 string value', () => {
      const jsonString = '["value"]'

      const indexes = jsonSensitiveAnalyzer._getKeysAndValuesIndexLists(jsonString)

      expect(indexes.keys.length).to.be.equal(0)

      expect(indexes.values).to.be.deep.equal([
        { start: 2, end: 7 }
      ])
    })

    it('json array with 2 string value', () => {
      const jsonString = '["value","value2"]'

      const indexes = jsonSensitiveAnalyzer._getKeysAndValuesIndexLists(jsonString)

      expect(indexes.keys.length).to.be.equal(0)

      expect(indexes.values).to.be.deep.equal([
        { start: 2, end: 7 },
        { start: 10, end: 16 }
      ])
    })

    it('json array with strings, numbers and booleans', () => {
      const jsonString = '["value",false,12,"value2",55.123,true,null]'

      const indexes = jsonSensitiveAnalyzer._getKeysAndValuesIndexLists(jsonString)

      expect(indexes.keys.length).to.be.equal(0)

      expect(indexes.values).to.be.deep.equal([
        { start: 2, end: 7 },
        { start: 9, end: 14 },
        { start: 15, end: 17 },
        { start: 19, end: 25 },
        { start: 27, end: 33 },
        { start: 34, end: 38 },
        { start: 39, end: 43 }
      ])
    })
  })
})
