{
  "version": 1,
  "suite": [
    {
      "type": "SOURCES",
      "description": "Source with sensitive name \"$1\"",
      "parameters": {
        "$1": [
          "password",
          "passwd",
          "pwd",
          "pass",
          "pass_phrase",
          "passPhrase",
          "secret",
          "api_key",
          "apikey",
          "secret_key",
          "secretKey",
          "access_key_id",
          "accessKeyId",
          "secret_access_key",
          "secretAccessKey",
          "private_key",
          "privateKey",
          "public_key",
          "publicKey",
          "token",
          "api_token",
          "apiToken",
          "expiration_token",
          "expirationToken",
          "refresh_token",
          "refreshToken",
          "consumer_id",
          "consumerId",
          "consumer_key",
          "consumerKey",
          "consumer_secret",
          "consumerSecret",
          "sign",
          "signature",
          "signed",
          "auth",
          "authorization",
          "authentication"
        ]
      },
      "input": [
        {
          "origin": "http.request.parameter",
          "name": "$1",
          "value": "table"
        }
      ],
      "expected": [
        {
          "origin": "http.request.parameter",
          "name": "$1",
          "redacted": true
        }
      ]
    },
    {
      "type": "SOURCES",
      "description": "Source with sensitive value \"$1\"",
      "parameters": {
        "$1": [
          "BEARER lwqjedqwdoqwidmoqwndun32i",
          "glpat-xxxxxxxxxxxxxxxxxxxx",
          "-----BEGIN RSA PRIVATE KEY----- MIIEpAIBAAKCAQEAkVDOAMenPclQ7z5U3i3QYw4lQuijEyxnEgTXkk88L20moFBU 4vJkSguvUXrGzNiH+WMWWWTAXBTDdtOHApQJSdU0P4lY+0P3Lw3WeZaetPm583ac DlaCk9DaqPQnjpZ/9DLqmx1r5JYAZbCiuXWMA0lzJUOOniwt94BWCnz3+0LbrC7j NsiaC7cRc1kmj/Nmu8ydA4eop44tJMlaXb9nnUIxglUm0yL1NDOTzokTP03Fa7JW t46gMo6co751nYm43MwOb/cY0Uh6+i59czXuCs0hFpWyEkQJDjcQNXgy9ctI0R/J nBbQykSJG8C0cB9nsfwbtuRIQVrgoj65erlXawIDAQABAoIBAByGkTnj93eQilu8 j6phsfOP9k6RHloIMF+AJdUpyrXApoF344H9dSR38L187YOOyfpxshRwS7aHuOsd kPY3my8sNCp4ysfgSqio/b42jAcYsqERWocSAmYD7LiX3SAHeSy1xgoXF3Py4jcU Go1vfsGybHEXNurj304jmkBK0d83rYdYFNa58jY+6fCrt7b7SdxcjImvRbx0ByvB O/igAQxHLYZAVM+9eD8kHRt6nFkdllGkdynMPx82RllpjyZvxBm8hXeRCXvT78Ja 9aOx6YZLND6iLinAh2J+zFKTtl+iX8DD+39DMFEgLjgKJB84phux1h/2PP8RS2tp 5TqWy7ECgYEA+A8HEKKFTaYD4GQaiD+L4gOh2ZcLykdG8IIXRxzCPtv5VWKS2SCz WWyFoVRlV4b6q96PJwdS/6skbbWS98HIg3aqhOVaXyGxZHlzRgopE3OfRiDcf/Xd bO+Y7phH6h+hMBWpAAojJ+lWzGkg2DewCY0NjkUdOrFAZZWWLrQqGGMCgYEAlfe+ S3gXGqVk3ZyS4f8TyWrkKfVaRVa2KT0GGBJ8TNOB7xlf0oVmKCKSGoWbY5znt2e2 OTb6/zL0qzm1R9pNw5tUE5k/cCReZ20TpcHExoc+1prvmoCO8ToYMfGPOTBpRKBo Hdtx4xjBVe9omP6c/U8jfMDUL+cEKgvvjHUXv1kCgYEApTo1RYJLcoYjTOLAvYI+ ZYRv2SSAKPNDME4mvSpNxFr3gEVRdSkP7X+YnvY9LojtDXAIQEHjqgLQF/d69mZw bgir2it+/6DMrRUskDmSVK+OJsMavG0DWV1aq4ppVGxPDF1RHYKjGiGVvEBGLV8i daornlkw9/g64a86ws8kvusCgYBvnRs7//zyD/aqGUYYfUe0uKFnuPueb5LTzl8i u19XrnMeCLyQakhFxrUGmDm2QakTj1TH8GuOU9ZVOXX6LDeERa6lh4D3bZn1T/E3 hKd3OmFCR73cN6IrVxl60lXOMoGmWdwjnJd+dYYu9yfZ9mXRAX1f9AP4Qu+Oe6Ol 3d/2wQKBgQCgdA48bkRGFR/OqcGACNVQFcXQYvSabKOZkg303NH7p4pD8Ng6FDW+ r8r8+M/iMF9q7XvcX5pF8zgGk/MfHOdf9wWv7Uih7CIQzJLEs+OzNqx//Jn1EuV4 GBudByVPLqUDB5nvcDxTTsDP+gPFQtQ1mAWB1r18s9x4OioqvoV/6Q== -----END RSA PRIVATE KEY-----",
          "-----BEGIN OPENSSH PRIVATE KEY----- MIIEpAIBAAKCAQEAkVDOAMenPclQ7z5U3i3QYw4lQuijEyxnEgTXkk88L20moFBU 4vJkSguvUXrGzNiH+WMWWWTAXBTDdtOHApQJSdU0P4lY+0P3Lw3WeZaetPm583ac DlaCk9DaqPQnjpZ/9DLqmx1r5JYAZbCiuXWMA0lzJUOOniwt94BWCnz3+0LbrC7j NsiaC7cRc1kmj/Nmu8ydA4eop44tJMlaXb9nnUIxglUm0yL1NDOTzokTP03Fa7JW t46gMo6co751nYm43MwOb/cY0Uh6+i59czXuCs0hFpWyEkQJDjcQNXgy9ctI0R/J nBbQykSJG8C0cB9nsfwbtuRIQVrgoj65erlXawIDAQABAoIBAByGkTnj93eQilu8 j6phsfOP9k6RHloIMF+AJdUpyrXApoF344H9dSR38L187YOOyfpxshRwS7aHuOsd kPY3my8sNCp4ysfgSqio/b42jAcYsqERWocSAmYD7LiX3SAHeSy1xgoXF3Py4jcU Go1vfsGybHEXNurj304jmkBK0d83rYdYFNa58jY+6fCrt7b7SdxcjImvRbx0ByvB O/igAQxHLYZAVM+9eD8kHRt6nFkdllGkdynMPx82RllpjyZvxBm8hXeRCXvT78Ja 9aOx6YZLND6iLinAh2J+zFKTtl+iX8DD+39DMFEgLjgKJB84phux1h/2PP8RS2tp 5TqWy7ECgYEA+A8HEKKFTaYD4GQaiD+L4gOh2ZcLykdG8IIXRxzCPtv5VWKS2SCz WWyFoVRlV4b6q96PJwdS/6skbbWS98HIg3aqhOVaXyGxZHlzRgopE3OfRiDcf/Xd bO+Y7phH6h+hMBWpAAojJ+lWzGkg2DewCY0NjkUdOrFAZZWWLrQqGGMCgYEAlfe+ S3gXGqVk3ZyS4f8TyWrkKfVaRVa2KT0GGBJ8TNOB7xlf0oVmKCKSGoWbY5znt2e2 OTb6/zL0qzm1R9pNw5tUE5k/cCReZ20TpcHExoc+1prvmoCO8ToYMfGPOTBpRKBo Hdtx4xjBVe9omP6c/U8jfMDUL+cEKgvvjHUXv1kCgYEApTo1RYJLcoYjTOLAvYI+ ZYRv2SSAKPNDME4mvSpNxFr3gEVRdSkP7X+YnvY9LojtDXAIQEHjqgLQF/d69mZw bgir2it+/6DMrRUskDmSVK+OJsMavG0DWV1aq4ppVGxPDF1RHYKjGiGVvEBGLV8i daornlkw9/g64a86ws8kvusCgYBvnRs7//zyD/aqGUYYfUe0uKFnuPueb5LTzl8i u19XrnMeCLyQakhFxrUGmDm2QakTj1TH8GuOU9ZVOXX6LDeERa6lh4D3bZn1T/E3 hKd3OmFCR73cN6IrVxl60lXOMoGmWdwjnJd+dYYu9yfZ9mXRAX1f9AP4Qu+Oe6Ol 3d/2wQKBgQCgdA48bkRGFR/OqcGACNVQFcXQYvSabKOZkg303NH7p4pD8Ng6FDW+ r8r8+M/iMF9q7XvcX5pF8zgGk/MfHOdf9wWv7Uih7CIQzJLEs+OzNqx//Jn1EuV4 GBudByVPLqUDB5nvcDxTTsDP+gPFQtQ1mAWB1r18s9x4OioqvoV/6Q== -----END OPENSSH PRIVATE KEY-----",
          "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCRUM4Ax6c9yVDvPlTeLdBjDiVC6KMTLGcSBNeSTzwvbSagUFTi8mRKC69ResbM2If5YxZZZMBcFMN204cClAlJ1TQ/iVj7Q/cvDdZ5lp60+bnzdpwOVoKT0Nqo9CeOln/0MuqbHWvklgBlsKK5dYwDSXMlQ46eLC33gFYKfPf7QtusLuM2yJoLtxFzWSaP82a7zJ0Dh6inji0kyVpdv2edQjGCVSbTIvU0M5POiRM/TcVrsla3jqAyjpyjvnWdibjczA5v9xjRSHr6Ln1zNe4KzSEWlbISRAkONxA1eDL1y0jRH8mcFtDKRIkbwLRwH2ex/Bu25EhBWuCiPrl6uVdr"
        ]
      },
      "input": [
        {
          "origin": "http.request.parameter",
          "name": "name",
          "value": "$1"
        }
      ],
      "expected": [
        {
          "origin": "http.request.parameter",
          "name": "name",
          "redacted": true
        }
      ]
    },
    {
      "type": "VULNERABILITIES",
      "description": "Weak cipher should not be redacted",
      "input": [
        {
          "type": "WEAK_CIPHER",
          "evidence": {
            "value": "SHA1"
          }
        }
      ],
      "expected": {
        "vulnerabilities": [
          {
            "type": "WEAK_CIPHER",
            "evidence": {
              "value": "SHA1"
            }
          }
        ]
      }
    },
    {
      "type": "VULNERABILITIES",
      "description": "Weak hash should not be redacted",
      "input": [
        {
          "type": "WEAK_HASH",
          "evidence": {
            "value": "MD5"
          }
        }
      ],
      "expected": {
        "vulnerabilities": [
          {
            "type": "WEAK_HASH",
            "evidence": {
              "value": "MD5"
            }
          }
        ]
      }
    },
    {
      "type": "VULNERABILITIES",
      "description": "Query without sensitive data",
      "input": [
        {
          "type": "SQL_INJECTION",
          "evidence": {
            "dialect": "MYSQL",
            "value": "select * from users",
            "ranges": [
              {
                "start": 14,
                "end": 19,
                "iinfo": {
                  "type": "http.request.parameter",
                  "parameterName": "table",
                  "parameterValue": "users"
                }
              }
            ]
          }
        }
      ],
      "expected": {
        "sources": [
          {
            "origin": "http.request.parameter",
            "name": "table",
            "value": "users"
          }
        ],
        "vulnerabilities": [
          {
            "type": "SQL_INJECTION",
            "evidence": {
              "valueParts": [
                {
                  "value": "select * from "
                },
                {
                  "source": 0,
                  "value": "users"
                }
              ]
            }
          }
        ]
      }
    },
    {
      "type": "VULNERABILITIES",
      "description": "Query with sensitive source",
      "input": [
        {
          "type": "SQL_INJECTION",
          "evidence": {
            "dialect": "MYSQL",
            "value": "select * from users",
            "ranges": [
              {
                "start": 14,
                "end": 19,
                "iinfo": {
                  "type": "http.request.parameter",
                  "parameterName": "secret",
                  "parameterValue": "users"
                }
              }
            ]
          }
        }
      ],
      "expected": {
        "sources": [
          {
            "origin": "http.request.parameter",
            "name": "secret",
            "redacted": true
          }
        ],
        "vulnerabilities": [
          {
            "type": "SQL_INJECTION",
            "evidence": {
              "valueParts": [
                {
                  "value": "select * from "
                },
                {
                  "source": 0,
                  "redacted": true
                }
              ]
            }
          }
        ]
      }
    },
    {
      "type": "VULNERABILITIES",
      "description": "Query with string literal $1",
      "parameters": {
        "$1": [
          "john",
          "username with ðŸŒ‰ surrogate"
        ]
      },
      "input": [
        {
          "type": "SQL_INJECTION",
          "evidence": {
            "dialect": "MYSQL",
            "value": "select * from users where username = '$1' and last_name = 'another surrogate ðŸ˜ƒ'",
            "ranges": [
              {
                "start": 14,
                "end": 19,
                "iinfo": {
                  "type": "http.request.parameter",
                  "parameterName": "table",
                  "parameterValue": "users"
                }
              }
            ]
          }
        }
      ],
      "expected": {
        "sources": [
          {
            "origin": "http.request.parameter",
            "name": "table",
            "value": "users"
          }
        ],
        "vulnerabilities": [
          {
            "type": "SQL_INJECTION",
            "evidence": {
              "valueParts": [
                {
                  "value": "select * from "
                },
                {
                  "source": 0,
                  "value": "users"
                },
                {
                  "value": " where username = '"
                },
                {
                  "redacted": true
                },
                {
                  "value": "' and last_name = '"
                },
                {
                  "redacted": true
                },
                {
                  "value": "'"
                }
              ]
            }
          }
        ]
      }
    },
    {
      "type": "VULNERABILITIES",
      "description": "Query with string literal $1",
      "parameters": {
        "$1": [
          "john",
          "username with ðŸŒ‰ surrogate"
        ]
      },
      "input": [
        {
          "type": "SQL_INJECTION",
          "evidence": {
            "dialect": "MYSQL",
            "value": "select * from users where username = \"$1\" and last_name = 'another surrogate ðŸ˜ƒ'",
            "ranges": [
              {
                "start": 14,
                "end": 19,
                "iinfo": {
                  "type": "http.request.parameter",
                  "parameterName": "table",
                  "parameterValue": "users"
                }
              }
            ]
          }
        }
      ],
      "expected": {
        "sources": [
          {
            "origin": "http.request.parameter",
            "name": "table",
            "value": "users"
          }
        ],
        "vulnerabilities": [
          {
            "type": "SQL_INJECTION",
            "evidence": {
              "valueParts": [
                { "value": "select * from " },
                { "source": 0, "value": "users" },
                { "value": " where username = \"" },
                { "redacted": true },
                { "value": "\" and last_name = '" },
                { "redacted": true },
                { "value": "'" }
              ]
            }
          }
        ]
      }
    },
    {
      "type": "VULNERABILITIES",
      "description": "POSTGRES Query with escaped string literal",
      "input": [
        {
          "type": "SQL_INJECTION",
          "evidence": {
            "dialect": "POSTGRES",
            "value": "select * from users where username = 'I''m an escaped string'",
            "ranges": [
              {
                "start": 14,
                "end": 19,
                "iinfo": {
                  "type": "http.request.parameter",
                  "parameterName": "table",
                  "parameterValue": "users"
                }
              }
            ]
          }
        }
      ],
      "expected": {
        "sources": [
          {
            "origin": "http.request.parameter",
            "name": "table",
            "value": "users"
          }
        ],
        "vulnerabilities": [
          {
            "type": "SQL_INJECTION",
            "evidence": {
              "valueParts": [
                {
                  "value": "select * from "
                },
                {
                  "source": 0,
                  "value": "users"
                },
                {
                  "value": " where username = '"
                },
                {
                  "redacted": true
                },
                {
                  "value": "'"
                }
              ]
            }
          }
        ]
      }
    },
    {
      "type": "VULNERABILITIES",
      "description": "MYSQL Query with escaped string literal",
      "input": [
        {
          "type": "SQL_INJECTION",
          "evidence": {
            "dialect": "MYSQL",
            "value": "select * from users where username = \"I\\\"m an escaped string\"",
            "ranges": [
              {
                "start": 14,
                "end": 19,
                "iinfo": {
                  "type": "http.request.parameter",
                  "parameterName": "table",
                  "parameterValue": "users"
                }
              }
            ]
          }
        }
      ],
      "expected": {
        "sources": [
          {
            "origin": "http.request.parameter",
            "name": "table",
            "value": "users"
          }
        ],
        "vulnerabilities": [
          {
            "type": "SQL_INJECTION",
            "evidence": {
              "valueParts": [
                {
                  "value": "select * from "
                },
                {
                  "source": 0,
                  "value": "users"
                },
                {
                  "value": " where username = \""
                },
                {
                  "redacted": true
                },
                {
                  "value": "\""
                }
              ]
            }
          }
        ]
      }
    },
    {
      "type": "VULNERABILITIES",
      "description": "Query with escaped string literal $1",
      "parameters": {
        "$1": [
          "$$",
          "$escape$"
        ]
      },
      "input": [
        {
          "type": "SQL_INJECTION",
          "evidence": {
            "dialect": "POSTGRES",
            "value": "select * from users where username = $1I'm an escaped string$1",
            "ranges": [
              {
                "start": 14,
                "end": 19,
                "iinfo": {
                  "type": "http.request.parameter",
                  "parameterName": "table",
                  "parameterValue": "users"
                }
              }
            ]
          }
        }
      ],
      "expected": {
        "sources": [
          {
            "origin": "http.request.parameter",
            "name": "table",
            "value": "users"
          }
        ],
        "vulnerabilities": [
          {
            "type": "SQL_INJECTION",
            "evidence": {
              "valueParts": [
                {
                  "value": "select * from "
                },
                {
                  "source": 0,
                  "value": "users"
                },
                {
                  "value": " where username = $1"
                },
                {
                  "redacted": true
                },
                {
                  "value": "$1"
                }
              ]
            }
          }
        ]
      }
    },
    {
      "type": "VULNERABILITIES",
      "description": "Query with numeric literal $1",
      "parameters": {
        "$1": [
          "0",
          "12345",
          "+12345",
          "-12345",
          "12.345",
          ".2345",
          "12.345E3",
          "12.345E+3",
          "12.345E-3",
          "12E-3",
          "X'12AE'",
          "0x12AE",
          "B'0011'",
          "0b0011"
        ]
      },
      "input": [
        {
          "type": "SQL_INJECTION",
          "evidence": {
            "dialect": "MYSQL",
            "value": "select * from users where user_colum_12345 = $1",
            "ranges": [
              {
                "start": 14,
                "end": 19,
                "iinfo": {
                  "type": "http.request.parameter",
                  "parameterName": "table",
                  "parameterValue": "users"
                }
              }
            ]
          }
        }
      ],
      "expected": {
        "sources": [
          {
            "origin": "http.request.parameter",
            "name": "table",
            "value": "users"
          }
        ],
        "vulnerabilities": [
          {
            "type": "SQL_INJECTION",
            "evidence": {
              "valueParts": [
                {
                  "value": "select * from "
                },
                {
                  "source": 0,
                  "value": "users"
                },
                {
                  "value": " where user_colum_12345 = "
                },
                {
                  "redacted": true
                }
              ]
            }
          }
        ]
      }
    },
    {
      "type": "VULNERABILITIES",
      "description": "Query with block comment",
      "input": [
        {
          "type": "SQL_INJECTION",
          "evidence": {
            "dialect": "POSTGRES",
            "value": "select * from users/*\nThis is a block comment\n*/",
            "ranges": [
              {
                "start": 14,
                "end": 19,
                "iinfo": {
                  "type": "http.request.parameter",
                  "parameterName": "table",
                  "parameterValue": "users"
                }
              }
            ]
          }
        }
      ],
      "expected": {
        "sources": [
          {
            "origin": "http.request.parameter",
            "name": "table",
            "value": "users"
          }
        ],
        "vulnerabilities": [
          {
            "type": "SQL_INJECTION",
            "evidence": {
              "valueParts": [
                {
                  "value": "select * from "
                },
                {
                  "source": 0,
                  "value": "users"
                },
                {
                  "value": "/*"
                },
                {
                  "redacted": true
                },
                {
                  "value": "*/"
                }
              ]
            }
          }
        ]
      }
    },
    {
      "type": "VULNERABILITIES",
      "description": "Query with line comment",
      "input": [
        {
          "type": "SQL_INJECTION",
          "evidence": {
            "dialect": "POSTGRES",
            "value": "select * from users -- This is a line comment",
            "ranges": [
              {
                "start": 14,
                "end": 19,
                "iinfo": {
                  "type": "http.request.parameter",
                  "parameterName": "table",
                  "parameterValue": "users"
                }
              }
            ]
          }
        }
      ],
      "expected": {
        "sources": [
          {
            "origin": "http.request.parameter",
            "name": "table",
            "value": "users"
          }
        ],
        "vulnerabilities": [
          {
            "type": "SQL_INJECTION",
            "evidence": {
              "valueParts": [
                {
                  "value": "select * from "
                },
                {
                  "source": 0,
                  "value": "users"
                },
                {
                  "value": " --"
                },
                {
                  "redacted": true
                }
              ]
            }
          }
        ]
      }
    },
    {
      "type": "VULNERABILITIES",
      "description": "Query with string literal matching tainted range",
      "input": [
        {
          "type": "SQL_INJECTION",
          "evidence": {
            "dialect": "POSTGRES",
            "value": "select * from users where username = 'john'",
            "ranges": [
              {
                "start": 38,
                "end": 42,
                "iinfo": {
                  "type": "http.request.parameter",
                  "parameterName": "username",
                  "parameterValue": "john"
                }
              }
            ]
          }
        }
      ],
      "expected": {
        "sources": [
          {
            "origin": "http.request.parameter",
            "name": "username",
            "redacted": true
          }
        ],
        "vulnerabilities": [
          {
            "type": "SQL_INJECTION",
            "evidence": {
              "valueParts": [
                {
                  "value": "select * from users where username = '"
                },
                {
                  "source": 0,
                  "redacted": true
                },
                {
                  "value": "'"
                }
              ]
            }
          }
        ]
      }
    },
    {
      "type": "VULNERABILITIES",
      "description": "Query with numeric literal matching tainted range",
      "input": [
        {
          "type": "SQL_INJECTION",
          "evidence": {
            "dialect": "POSTGRES",
            "value": "select * from users where user_id = 123",
            "ranges": [
              {
                "start": 36,
                "end": 39,
                "iinfo": {
                  "type": "http.request.parameter",
                  "parameterName": "user_id",
                  "parameterValue": "123"
                }
              }
            ]
          }
        }
      ],
      "expected": {
        "sources": [
          {
            "origin": "http.request.parameter",
            "name": "user_id",
            "redacted": true
          }
        ],
        "vulnerabilities": [
          {
            "type": "SQL_INJECTION",
            "evidence": {
              "valueParts": [
                {
                  "value": "select * from users where user_id = "
                },
                {
                  "source": 0,
                  "redacted": true
                }
              ]
            }
          }
        ]
      }
    },
    {
      "type": "VULNERABILITIES",
      "description": "Query with string literal overlapping sensitive source",
      "input": [
        {
          "type": "SQL_INJECTION",
          "evidence": {
            "dialect": "POSTGRES",
            "value": "select * from users where password = '12345'",
            "ranges": [
              {
                "start": 38,
                "end": 43,
                "iinfo": {
                  "type": "http.request.parameter",
                  "parameterName": "password",
                  "parameterValue": "12345"
                }
              }
            ]
          }
        }
      ],
      "expected": {
        "sources": [
          {
            "origin": "http.request.parameter",
            "name": "password",
            "redacted": true
          }
        ],
        "vulnerabilities": [
          {
            "type": "SQL_INJECTION",
            "evidence": {
              "valueParts": [
                {
                  "value": "select * from users where password = '"
                },
                {
                  "source": 0,
                  "redacted": true
                },
                {
                  "value": "'"
                }
              ]
            }
          }
        ]
      }
    },
    {
      "type": "VULNERABILITIES",
      "description": "Query with string literal partially overlapping sensitive source",
      "input": [
        {
          "type": "SQL_INJECTION",
          "evidence": {
            "dialect": "POSTGRES",
            "value": "select * from users where password = '12345:{xyz}'",
            "ranges": [
              {
                "start": 38,
                "end": 43,
                "iinfo": {
                  "type": "http.request.parameter",
                  "parameterName": "password",
                  "parameterValue": "12345"
                }
              }
            ]
          }
        }
      ],
      "expected": {
        "sources": [
          {
            "origin": "http.request.parameter",
            "name": "password",
            "redacted": true
          }
        ],
        "vulnerabilities": [
          {
            "type": "SQL_INJECTION",
            "evidence": {
              "valueParts": [
                {
                  "value": "select * from users where password = '"
                },
                {
                  "source": 0,
                  "redacted": true
                },
                {
                  "redacted": true
                },
                {
                  "value": "'"
                }
              ]
            }
          }
        ]
      }
    },
    {
      "type": "VULNERABILITIES",
      "description": "Query with string literal partially overlapped with tainted ranges",
      "input": [
        {
          "type": "SQL_INJECTION",
          "evidence": {
            "dialect": "POSTGRES",
            "value": "select * from users where username = 'john:doe'",
            "ranges": [
              {
                "start": 38,
                "end": 42,
                "iinfo": {
                  "type": "http.request.parameter",
                  "parameterName": "first_name",
                  "parameterValue": "john"
                }
              }
            ]
          }
        }
      ],
      "expected": {
        "sources": [
          {
            "origin": "http.request.parameter",
            "name": "first_name",
            "redacted": true
          }
        ],
        "vulnerabilities": [
          {
            "type": "SQL_INJECTION",
            "evidence": {
              "valueParts": [
                {
                  "value": "select * from users where username = '"
                },
                {
                  "source": 0,
                  "redacted": true
                },
                {
                  "redacted": true
                },
                {
                  "value": "'"
                }
              ]
            }
          }
        ]
      }
    },
    {
      "type": "VULNERABILITIES",
      "description": "Query with string literal containing tainted range",
      "input": [
        {
          "type": "SQL_INJECTION",
          "evidence": {
            "dialect": "POSTGRES",
            "value": "select * from users where username = 'john:doe:ADMIN'",
            "ranges": [
              {
                "start": 43,
                "end": 46,
                "iinfo": {
                  "type": "http.request.parameter",
                  "parameterName": "last_name",
                  "parameterValue": "doe"
                }
              }
            ]
          }
        }
      ],
      "expected": {
        "sources": [
          {
            "origin": "http.request.parameter",
            "name": "last_name",
            "redacted": true
          }
        ],
        "vulnerabilities": [
          {
            "type": "SQL_INJECTION",
            "evidence": {
              "valueParts": [
                { "value": "select * from users where username = '" },
                { "redacted": true },
                { "source": 0, "redacted": true },
                { "redacted": true },
                { "value": "'" }
              ]
            }
          }
        ]
      }
    },
    {
      "type": "VULNERABILITIES",
      "description": "Query with string literal and tainted range crossing boundaries",
      "input": [
        {
          "type": "SQL_INJECTION",
          "evidence": {
            "dialect": "POSTGRES",
            "value": "select * from users where username = 'john'",
            "ranges": [
              {
                "start": 26,
                "end": 43,
                "iinfo": {
                  "type": "http.request.parameter",
                  "parameterName": "clause",
                  "parameterValue": "username = 'john'"
                }
              }
            ]
          }
        }
      ],
      "expected": {
        "sources": [
          {
            "origin": "http.request.parameter",
            "name": "clause",
            "redacted": true
          }
        ],
        "vulnerabilities": [
          {
            "type": "SQL_INJECTION",
            "evidence": {
              "valueParts": [
                {
                  "value": "select * from users where "
                },
                {
                  "source": 0,
                  "redacted": true
                }
              ]
            }
          }
        ]
      }
    },
    {
      "type": "VULNERABILITIES",
      "description": "Query with tainted range in two LIKEs with not tainted % char",
      "input": [
        {
          "type": "SQL_INJECTION",
          "evidence": {
            "dialect": "MYSQL",
            "value": "select * from table where name LIKE '%searchparam%' OR description LIKE '%searchparam%'",
            "ranges": [
              {
                "start": 38, "end": 49, "iinfo": { "type": "http.request.parameter", "parameterName": "query", "parameterValue": "searchparam" }
              },
              {
                "start": 74, "end": 85, "iinfo": { "type": "http.request.parameter", "parameterName": "query", "parameterValue": "searchparam" }
              }
            ]
          }
        }
      ],
      "expected": {
        "sources": [
          { "origin": "http.request.parameter", "name": "query", "redacted": true }
        ],
        "vulnerabilities": [
          {
            "type": "SQL_INJECTION",
            "evidence": {
              "valueParts": [
                { "value": "select * from table where name LIKE '" },
                { "redacted": true },
                { "source": 0, "redacted": true },
                { "redacted": true },
                { "value": "' OR description LIKE '" },
                { "redacted": true },
                { "source": 0, "redacted": true },
                { "redacted": true },
                { "value": "'" }
              ]
            }
          }
        ]
      }
    },
    {
      "type": "VULNERABILITIES",
      "description": "Query with string literal and weird tainted range crossing boundaries",
      "input": [
        {
          "type": "SQL_INJECTION",
          "evidence": {
            "dialect": "POSTGRES",
            "value": "select * from users where username = 'john:ADMIN_ROLE'",
            "ranges": [
              {
                "start": 26,
                "end": 42,
                "iinfo": {
                  "type": "http.request.parameter",
                  "parameterName": "clause",
                  "parameterValue": "username = 'john"
                }
              }
            ]
          }
        }
      ],
      "expected": {
        "sources": [
          {
            "origin": "http.request.parameter",
            "name": "clause",
            "redacted": true
          }
        ],
        "vulnerabilities": [
          {
            "type": "SQL_INJECTION",
            "evidence": {
              "valueParts": [
                {
                  "value": "select * from users where "
                },
                {
                  "source": 0,
                  "redacted": true
                },
                {
                  "redacted": true
                },
                {
                  "value": "'"
                }
              ]
            }
          }
        ]
      }
    },
    {
      "type": "VULNERABILITIES",
      "description": "Query with multiple ranges and literals",
      "input": [
        {
          "type": "SQL_INJECTION",
          "evidence": {
            "dialect": "POSTGRES",
            "value": "select id as \"super user id\"\n\tfrom users\n\twhere username = 'john:doe' and password LIKE 'super_secure%' and user_id_123 > 00000",
            "ranges": [
              {
                "start": 60,
                "end": 64,
                "iinfo": {
                  "type": "http.request.parameter",
                  "parameterName": "first_name",
                  "parameterValue": "john"
                }
              },
              {
                "start": 65,
                "end": 68,
                "iinfo": {
                  "type": "http.request.parameter",
                  "parameterName": "last_name",
                  "parameterValue": "doe"
                }
              },
              {
                "start": 89,
                "end": 101,
                "iinfo": {
                  "type": "http.request.parameter",
                  "parameterName": "password",
                  "parameterValue": "super_secure"
                }
              }
            ]
          }
        }
      ],
      "expected": {
        "sources": [
          {
            "origin": "http.request.parameter",
            "name": "first_name",
            "redacted": true
          },
          {
            "origin": "http.request.parameter",
            "name": "last_name",
            "redacted": true
          },
          {
            "origin": "http.request.parameter",
            "name": "password",
            "redacted": true
          }
        ],
        "vulnerabilities": [
          {
            "type": "SQL_INJECTION",
            "evidence": {
              "valueParts": [
                {
                  "value": "select id as \"super user id\"\n\tfrom users\n\twhere username = '"
                },
                {
                  "source": 0,
                  "redacted": true
                },
                {
                  "redacted": true
                },
                {
                  "source": 1,
                  "redacted": true
                },
                {
                  "value": "' and password LIKE '"
                },
                {
                  "source": 2,
                  "redacted": true
                },
                {
                  "redacted": true
                },
                {
                  "value": "' and user_id_123 > "
                },
                {
                  "redacted": true
                }
              ]
            }
          }
        ]
      }
    },
    {
      "type": "VULNERABILITIES",
      "description": "Ldap with literal and filter $1",
      "parameters": {
        "$1": [
          "=",
          "~=",
          ">=",
          "<="
        ]
      },
      "input": [
        {
          "type": "LDAP_INJECTION",
          "evidence": {
            "value": "(cn$1Babs Jensen)",
            "ranges": [
              {
                "start": 1,
                "end": 3,
                "iinfo": {
                  "type": "http.request.parameter",
                  "parameterName": "attr",
                  "parameterValue": "cn"
                }
              }
            ]
          }
        }
      ],
      "expected": {
        "sources": [
          {
            "origin": "http.request.parameter",
            "name": "attr",
            "value": "cn"
          }
        ],
        "vulnerabilities": [
          {
            "type": "LDAP_INJECTION",
            "evidence": {
              "valueParts": [
                {
                  "value": "("
                },
                {
                  "source": 0,
                  "value": "cn"
                },
                {
                  "value": "$1"
                },
                {
                  "redacted": true
                },
                {
                  "value": ")"
                }
              ]
            }
          }
        ]
      }
    },
    {
      "type": "VULNERABILITIES",
      "description": "Ldap with extensible matching",
      "input": [
        {
          "type": "LDAP_INJECTION",
          "evidence": {
            "value": "(:DN:2.4.6.8.10:=Dino)",
            "ranges": [
              {
                "start": 5,
                "end": 15,
                "iinfo": {
                  "type": "http.request.parameter",
                  "parameterName": "oid",
                  "parameterValue": "2.4.6.8.10"
                }
              }
            ]
          }
        }
      ],
      "expected": {
        "vulnerabilities": [
          {
            "type": "LDAP_INJECTION",
            "evidence": {
              "valueParts": [
                {
                  "value": "(:DN:"
                },
                {
                  "source": 0,
                  "value": "2.4.6.8.10"
                },
                {
                  "value": ":="
                },
                {
                  "redacted": true
                },
                {
                  "value": ")"
                }
              ]
            }
          }
        ]
      }
    },
    {
      "type": "VULNERABILITIES",
      "description": "Ldap complex search",
      "input": [
        {
          "type": "LDAP_INJECTION",
          "evidence": {
            "value": "(cn=Babs Jensen)\n(!(cn=Tim Howes))\n(&(objectClass=Person)(|(sn=Jensen)(cn=Babs J*)))\n(o=univ*of*mich*)\n(seeAlso=)",
            "ranges": [
              {
                "start": 4,
                "end": 15,
                "iinfo": {
                  "type": "http.request.parameter",
                  "parameterName": "cn",
                  "parameterValue": "Babs Jensen"
                }
              },
              {
                "start": 63,
                "end": 69,
                "iinfo": {
                  "type": "http.request.parameter",
                  "parameterName": "cn",
                  "parameterValue": "Babs Jensen"
                }
              },
              {
                "start": 74,
                "end": 80,
                "iinfo": {
                  "type": "http.request.parameter",
                  "parameterName": "cn",
                  "parameterValue": "Babs Jensen"
                }
              }
            ]
          }
        }
      ],
      "expected": {
        "sources": [
          {
            "origin": "http.request.parameter",
            "name": "cn",
            "redacted": true
          }
        ],
        "vulnerabilities": [
          {
            "type": "LDAP_INJECTION",
            "evidence": {
              "valueParts": [
                {
                  "value": "(cn="
                },
                {
                  "source": 0,
                  "redacted": true
                },
                {
                  "value": ")\n(!(cn="
                },
                {
                  "redacted": true
                },
                {
                  "value": "))\n(&(objectClass="
                },
                {
                  "redacted": true
                },
                {
                  "value": ")(|(sn="
                },
                {
                  "source": 0,
                  "redacted": true
                },
                {
                  "value": ")(cn="
                },
                {
                  "source": 0,
                  "redacted": true
                },
                {
                  "redacted": true
                },
                {
                  "value": ")))\n(o="
                },
                {
                  "redacted": true
                },
                {
                  "value": ")\n(seeAlso=)"
                }
              ]
            }
          }
        ]
      }
    },
    {
      "type": "VULNERABILITIES",
      "description": "Ldap with escaping",
      "input": [
        {
          "type": "LDAP_INJECTION",
          "evidence": {
            "value": "(o=Parens R Us \\28for all your parenthetical needs\\29)\n(cn=*\\2A*)\n(filename=C:\\5cMyFile)\n(bin=\\00\\00\\00\\04)\n(sn=Lu\\c4\\8di\\c4\\87)\n(1.3.6.1.4.1.1466.0=\\04\\02\\48\\69)",
            "ranges": [
              {
                "start": 76,
                "end": 87,
                "iinfo": {
                  "type": "http.request.parameter",
                  "parameterName": "file",
                  "parameterValue": "C:\\5cMyFile"
                }
              }
            ]
          }
        }
      ],
      "expected": {
        "sources": [
          {
            "origin": "http.request.parameter",
            "name": "file",
            "redacted": true
          }
        ],
        "vulnerabilities": [
          {
            "type": "LDAP_INJECTION",
            "evidence": {
              "valueParts": [
                {
                  "value": "(o="
                },
                {
                  "redacted": true
                },
                {
                  "value": ")\n(cn="
                },
                {
                  "redacted": true
                },
                {
                  "value": ")\n(filename="
                },
                {
                  "source": 0,
                  "redacted": true
                },
                {
                  "value": ")\n(bin="
                },
                {
                  "redacted": true
                },
                {
                  "value": ")\n(sn="
                },
                {
                  "redacted": true
                },
                {
                  "value": ")\n(1.3.6.1.4.1.1466.0="
                },
                {
                  "redacted": true
                },
                {
                  "value": ")"
                }
              ]
            }
          }
        ]
      }
    },
    {
      "type": "VULNERABILITIES",
      "description": "Path traversal should not be redacted",
      "input": [
        {
          "type": "PATH_TRAVERSAL",
          "evidence": {
            "value": "/home/user/my_document.txt",
            "ranges": [
              {
                "start": 11,
                "end": 26,
                "iinfo": {
                  "type": "http.request.parameter",
                  "parameterName": "file",
                  "parameterValue": "my_document.txt"
                }
              }
            ]
          }
        }
      ],
      "expected": {
        "sources": [
          {
            "origin": "http.request.parameter",
            "name": "file",
            "value": "my_document.txt"
          }
        ],
        "vulnerabilities": [
          {
            "type": "PATH_TRAVERSAL",
            "evidence": {
              "valueParts": [
                {
                  "value": "/home/user/"
                },
                {
                  "value": "my_document.txt",
                  "source": 0
                }
              ]
            }
          }
        ]
      }
    },
    {
      "type": "VULNERABILITIES",
      "description": "Command injection only keeps the first command",
      "input": [
        {
          "type": "COMMAND_INJECTION",
          "evidence": {
            "value": "cat /home/user/file.txt",
            "ranges": [
              {
                "start": 15,
                "end": 23,
                "iinfo": {
                  "type": "http.request.parameter",
                  "parameterName": "file",
                  "parameterValue": "file.txt"
                }
              }
            ]
          }
        }
      ],
      "expected": {
        "sources": [
          {
            "origin": "http.request.parameter",
            "name": "file",
            "redacted": true
          }
        ],
        "vulnerabilities": [
          {
            "type": "COMMAND_INJECTION",
            "evidence": {
              "valueParts": [
                {
                  "value": "cat "
                },
                {
                  "redacted": true
                },
                {
                  "source": 0,
                  "redacted": true
                }
              ]
            }
          }
        ]
      }
    },
    {
      "type": "VULNERABILITIES",
      "description": "Command injection does not redact commands that trigger other commands",
      "parameters": {
        "$1": [
          "sudo",
          "doas"
        ]
      },
      "input": [
        {
          "type": "COMMAND_INJECTION",
          "evidence": {
            "value": "$1 cat /home/user/file.txt",
            "ranges": [
              {
                "start": 20,
                "end": 28,
                "iinfo": {
                  "type": "http.request.parameter",
                  "parameterName": "file",
                  "parameterValue": "file.txt"
                }
              }
            ]
          }
        }
      ],
      "expected": {
        "sources": [
          {
            "origin": "http.request.parameter",
            "name": "file",
            "redacted": true
          }
        ],
        "vulnerabilities": [
          {
            "type": "COMMAND_INJECTION",
            "evidence": {
              "valueParts": [
                {
                  "value": "$1 cat "
                },
                {
                  "redacted": true
                },
                {
                  "source": 0,
                  "redacted": true
                }
              ]
            }
          }
        ]
      }
    },
    {
      "type": "VULNERABILITIES",
      "description": "Command injection does not redact ranges with only whitespaces",
      "parameters": {
        "$1": [
          "sudo",
          "doas"
        ]
      },
      "input": [
        {
          "type": "COMMAND_INJECTION",
          "evidence": {
            "value": "ls -lah",
            "ranges": [
              {
                "start": 0,
                "end": 2,
                "iinfo": {
                  "type": "http.request.parameter",
                  "parameterName": "command",
                  "parameterValue": "ls"
                }
              },
              {
                "start": 3,
                "end": 7,
                "iinfo": {
                  "type": "http.request.parameter",
                  "parameterName": "argument",
                  "parameterValue": "-lha"
                }
              }
            ]
          }
        }
      ],
      "expected": {
        "sources": [
          {
            "origin": "http.request.parameter",
            "name": "command",
            "value": "ls"
          },
          {
            "origin": "http.request.parameter",
            "name": "argument",
            "redacted": true
          }
        ],
        "vulnerabilities": [
          {
            "type": "COMMAND_INJECTION",
            "evidence": {
              "valueParts": [
                { "source": 0, "value": "ls" },
                { "value": " " },
                { "source": 1, "redacted": true}
              ]
            }
          }
        ]
      }
    }
  ]
}
