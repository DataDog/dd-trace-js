const VULNERABILITIES_KEY = 'vulnerabilities'
const IAST_JSON_TAG_KEY = '_dd.iast.json'
const MANUAL_KEEP_KEY = 'manual.keep'

function createVulnerability (type, evidence, spanId, location) {
  if (type && evidence && typeof spanId === 'number') {
    return {
      type,
      evidence,
      location: {
        spanId,
        ...location
      }
    }
  }
  return null
}

function addVulnerability (iastContext, vulnerability) {
  if (iastContext && vulnerability && vulnerability.evidence && vulnerability.type &&
    vulnerability.location && vulnerability.location.spanId) {
    iastContext[VULNERABILITIES_KEY] = iastContext[VULNERABILITIES_KEY] || []
    iastContext[VULNERABILITIES_KEY].push(vulnerability)
  }
}

function isValidVulnerability (vulnerability) {
  return vulnerability && vulnerability.type &&
    vulnerability.evidence && vulnerability.evidence.value &&
    vulnerability.location && vulnerability.location.spanId &&
    typeof vulnerability.location.spanId === 'number'
}

function jsonVulnerabilityFromVulnerability (vulnerability) {
  const jsonVulnerability = {
    type: vulnerability.type,
    evidence: {
      value: vulnerability.evidence.value
    },
    location: {
      spanId: vulnerability.location.spanId
    }
  }
  if (vulnerability.location.path) {
    jsonVulnerability.location.path = vulnerability.location.path
  }
  if (vulnerability.location.line) {
    jsonVulnerability.location.line = vulnerability.location.line
  }
  return jsonVulnerability
}

function sendVulnerabilities (iastContext, span) {
  if (iastContext && span && iastContext[VULNERABILITIES_KEY] &&
    iastContext[VULNERABILITIES_KEY].length && span.addTags) {
    const allVulnerabilities = iastContext[VULNERABILITIES_KEY]
    // TODO support sources and ranges
    const jsonToSend = {
      vulnerabilities: []
    }
    allVulnerabilities.forEach((vulnerability) => {
      if (isValidVulnerability(vulnerability)) {
        jsonToSend.vulnerabilities.push(jsonVulnerabilityFromVulnerability(vulnerability))
      }
    })
    if (jsonToSend.vulnerabilities.length > 0) {
      const tags = {}
      tags[IAST_JSON_TAG_KEY] = JSON.stringify(jsonToSend)
      tags[MANUAL_KEEP_KEY] = 'true'
      span.addTags(tags)
    }
  }
  return IAST_JSON_TAG_KEY
}

module.exports = {
  createVulnerability,
  addVulnerability,
  sendVulnerabilities
}
