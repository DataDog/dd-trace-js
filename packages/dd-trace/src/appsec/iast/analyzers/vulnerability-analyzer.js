'use strict'

const Plugin = require('../../../../src/plugins/plugin')
const { storage } = require('../../../../../datadog-core')
const { getFirstNonDDPathAndLine } = require('../path-line')
const { createVulnerability, addVulnerability } = require('../vulnerability-reporter')
const { getIastContext } = require('../iast-context')
const overheadController = require('../overhead-controller')

class Analyzer extends Plugin {
  constructor (type) {
    super()
    this._type = type
  }

  _isVulnerable (value, context) {
    return false
  }

  _report (value, context) {
    if (this._checkOCE(context)) {
      const evidence = this._getEvidence(value, context)
      const location = this._getLocation()
      const spanId = context && context.rootSpan && context.rootSpan.context().toSpanId()
      const vulnerability = createVulnerability(this._type, evidence, spanId, location)
      addVulnerability(context, vulnerability)
    }
  }

  _getEvidence (value) {
    return { value }
  }

  _getLocation () {
    return getFirstNonDDPathAndLine()
  }

  analyze (value) {
    const iastContext = getIastContext(storage.getStore())
    if (!iastContext) {
      return
    }

    switch (value.constructor) {
      case Object:
        if (value.arguments) {
          for (const val of value.arguments) {
            if (this._isVulnerable(val, iastContext)) {
              this._report(val, iastContext)
              // no support several evidences in the same vulnerability, just report the 1st one
              break
            }
          }
        }
        break
      case String:
        if (this._isVulnerable(value, iastContext)) {
          this._report(value, iastContext)
        }
        break
    }
  }

  _checkOCE (context) {
    return overheadController.hasQuota(overheadController.OPERATIONS.REPORT_VULNERABILITY, context)
  }
}

module.exports = Analyzer
