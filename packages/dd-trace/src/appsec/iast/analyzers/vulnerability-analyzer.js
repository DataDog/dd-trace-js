'use strict'

const Plugin = require('../../../../src/plugins/plugin')
const { storage } = require('../../../../../datadog-core')
const log = require('../../../log')
const { getFirstNonDDPathAndLine } = require('../path-line')
const { createVulnerability, addVulnerability } = require('../vulnerability-reporter')
const { getIastContext } = require('../iast-context')
const overheadController = require('../overhead-controller')

class Analyzer extends Plugin {
  constructor (type) {
    super()
    this._type = type
  }

  _wrapHandler (handler) {
    return (message, name) => {
      try {
        handler(message, name)
      } catch (e) {
        log.debug(e)
      }
    }
  }

  addSub (channelName, handler) {
    super.addSub(channelName, this._wrapHandler(handler))
  }

  _isVulnerable (value, context) {
    return false
  }

  _report (value, context) {
    const evidence = this._getEvidence(value, context)
    const location = this._getLocation()
    const spanId = context && context.rootSpan && context.rootSpan.context().toSpanId()
    const vulnerability = createVulnerability(this._type, evidence, spanId, location)
    addVulnerability(context, vulnerability)
  }

  _reportIfVulnerable (value, context) {
    if (this._isVulnerable(value, context) && this._checkOCE(context)) {
      this._report(value, context)
      return true
    }
    return false
  }

  _getEvidence (value) {
    return { value }
  }

  _getLocation () {
    return getFirstNonDDPathAndLine()
  }

  analyze (value) {
    const iastContext = getIastContext(storage.getStore())
    if (!iastContext) return

    this._reportIfVulnerable(value, iastContext)
  }

  analyzeAll (...values) {
    const iastContext = getIastContext(storage.getStore())
    if (!iastContext) return

    for (let i = 0; i < values.length; i++) {
      const value = values[i]
      if (this._isVulnerable(value, iastContext)) {
        if (this._checkOCE(iastContext)) {
          this._report(value, iastContext)
        }
        break
      }
    }
  }

  _checkOCE (context) {
    return overheadController.hasQuota(overheadController.OPERATIONS.REPORT_VULNERABILITY, context)
  }
}

module.exports = Analyzer
