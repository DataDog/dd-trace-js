syntax = "proto3";

package opentelemetry.proto.logs.v1;

import "common.proto";
import "resource.proto";

option go_package = "go.opentelemetry.io/collector/pdata/plog";

// A collection of logs from a Resource.
message ResourceLogs {
  // The resource for the logs in this message.
  // If this field is not set then no resource info is known.
  opentelemetry.proto.resource.v1.Resource resource = 1;

  // A list of ScopeLogs that originate from a resource.
  repeated ScopeLogs scope_logs = 2;

  // This schema_url applies to the data in the "resource" field. It does not apply
  // to the data in the "scope_logs" field which have their own schema_url field.
  string schema_url = 3;
}

// A collection of logs from a Scope.
message ScopeLogs {
  // The instrumentation scope information for the logs in this message.
  // Semantically when InstrumentationScope isn't set, it is equivalent with
  // an empty instrumentation scope name (unknown).
  opentelemetry.proto.common.v1.InstrumentationScope scope = 1;

  // A list of log records.
  repeated LogRecord log_records = 2;

  // This schema_url applies to all the log records in the "log_records" field.
  string schema_url = 3;
}

// A log record according to OpenTelemetry Log Data Model:
// https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/logs/data-model.md
message LogRecord {
  // time_unix_nano is the time when the event occurred.
  // Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.
  // Value of 0 indicates unknown or missing timestamp.
  fixed64 time_unix_nano = 1;

  // Time when the event was observed by the collection system.
  // For events that originate in OpenTelemetry (e.g. using OpenTelemetry Logging
  // SDK) this timestamp is typically set at the generation time and is equal to
  // Timestamp. For events that originate externally and collected by OpenTelemetry
  // (e.g. using Collector) this is the time when OpenTelemetry's code observed the
  // event measured by the clock of the OpenTelemetry code. This field MUST be set
  // once the event is observed by OpenTelemetry.
  //
  // For converting OpenTelemetry log data to formats that support only one
  // timestamp per log entry (such as Fluent Bit Logstash or Splunk) this field
  // SHOULD be used as the "log timestamp".
  // An implementation of the OpenTelemetry API SHOULD NOT set this field
  // if the corresponding event did not happen in this process.
  fixed64 observed_time_unix_nano = 2;

  // Numerical value of the severity, normalized to values described in Log Data Model.
  // [Optional].
  opentelemetry.proto.logs.v1.SeverityNumber severity_number = 3;

  // The severity text (also known as log level). The original string representation as
  // it is known at the source. [Optional].
  string severity_text = 4;

  // A value containing the body of the log record. Can be for example a human-readable
  // string message (including multi-line text) or a structured object in a format
  // that is known to the logging SDK.
  opentelemetry.proto.common.v1.AnyValue body = 5;

  // Additional attributes that describe the specific event occurrence. [Optional].
  // Attribute keys MUST be unique (it is not allowed to have more than one
  // attribute with the same key).
  repeated opentelemetry.proto.common.v1.KeyValue attributes = 6;

  // Flags, a bit field. 8 least significant bits are the trace flags as
  // defined in W3C Trace Context specification. 24 most significant bits are reserved
  // and must be set to 0. Readers must not assume that 24 most significant bits
  // will be zero and must correctly mask the bits when reading 8-bit trace flag
  // (use flags & TRACE_FLAGS_MASK). [Optional].
  fixed32 flags = 7;

  // A unique identifier for a trace. All logs from the same trace share
  // the same trace_id. The ID is a 16-byte array. An ID with all zeroes
  // is considered invalid. Can be set for logs that are part of request processing
  // and are associated with a particular trace, or if the log record is a
  // standalone log record that is not part of a request processing.
  // The value is an array of bytes. [Optional].
  bytes trace_id = 8;

  // A unique identifier for a span within a trace, assigned when the span
  // is created. The ID is an 8-byte array. An ID with all zeroes is considered
  // invalid. Can be set for logs that are part of a particular processing
  // within a trace. The value is an array of bytes. [Optional].
  bytes span_id = 9;
}

// Possible values for LogRecord.SeverityNumber.
enum SeverityNumber {
  // UNSPECIFIED is the default SeverityNumber, it MUST NOT be used.
  SEVERITY_NUMBER_UNSPECIFIED = 0;

  // TRACE is SeverityNumber for TRACE level.
  SEVERITY_NUMBER_TRACE = 1;

  // TRACE2 is SeverityNumber for TRACE2 level.
  SEVERITY_NUMBER_TRACE2 = 2;

  // TRACE3 is SeverityNumber for TRACE3 level.
  SEVERITY_NUMBER_TRACE3 = 3;

  // TRACE4 is SeverityNumber for TRACE4 level.
  SEVERITY_NUMBER_TRACE4 = 4;

  // DEBUG is SeverityNumber for DEBUG level.
  SEVERITY_NUMBER_DEBUG = 5;

  // DEBUG2 is SeverityNumber for DEBUG2 level.
  SEVERITY_NUMBER_DEBUG2 = 6;

  // DEBUG3 is SeverityNumber for DEBUG3 level.
  SEVERITY_NUMBER_DEBUG3 = 7;

  // DEBUG4 is SeverityNumber for DEBUG4 level.
  SEVERITY_NUMBER_DEBUG4 = 8;

  // INFO is SeverityNumber for INFO level.
  SEVERITY_NUMBER_INFO = 9;

  // INFO2 is SeverityNumber for INFO2 level.
  SEVERITY_NUMBER_INFO2 = 10;

  // INFO3 is SeverityNumber for INFO3 level.
  SEVERITY_NUMBER_INFO3 = 11;

  // INFO4 is SeverityNumber for INFO4 level.
  SEVERITY_NUMBER_INFO4 = 12;

  // WARN is SeverityNumber for WARN level.
  SEVERITY_NUMBER_WARN = 13;

  // WARN2 is SeverityNumber for WARN2 level.
  SEVERITY_NUMBER_WARN2 = 14;

  // WARN3 is SeverityNumber for WARN3 level.
  SEVERITY_NUMBER_WARN3 = 15;

  // WARN4 is SeverityNumber for WARN4 level.
  SEVERITY_NUMBER_WARN4 = 16;

  // ERROR is SeverityNumber for ERROR level.
  SEVERITY_NUMBER_ERROR = 17;

  // ERROR2 is SeverityNumber for ERROR2 level.
  SEVERITY_NUMBER_ERROR2 = 18;

  // ERROR3 is SeverityNumber for ERROR3 level.
  SEVERITY_NUMBER_ERROR3 = 19;

  // ERROR4 is SeverityNumber for ERROR4 level.
  SEVERITY_NUMBER_ERROR4 = 20;

  // FATAL is SeverityNumber for FATAL level.
  SEVERITY_NUMBER_FATAL = 21;

  // FATAL2 is SeverityNumber for FATAL2 level.
  SEVERITY_NUMBER_FATAL2 = 22;

  // FATAL3 is SeverityNumber for FATAL3 level.
  SEVERITY_NUMBER_FATAL3 = 23;

  // FATAL4 is SeverityNumber for FATAL4 level.
  SEVERITY_NUMBER_FATAL4 = 24;
}
