// AUTO-GENERATED by dd-compile from bee-queue.analysis.json
// To customize plugin behavior, edit this file directly.
// Re-running dd-compile will show a diff but won't overwrite without confirmation.

'use strict'

const ProducerPlugin = require('../../dd-trace/src/plugins/producer')
const Extractors = require('./extractors')

class BeeQueueProducerPlugin extends ProducerPlugin {
  static get id () {
    return 'bee-queue'
  }

  constructor (...args) {
    super(...args)
    this.subscribe()
  }

  subscribe () {
    this.addBind('tracing:apm:bee-queue:queue:close:start', (ctx) => this.queueCloseStart(ctx))
    this.addBind('tracing:apm:bee-queue:queue:close:error', (ctx) => this.error(ctx))
    this.addBind('tracing:apm:bee-queue:queue:close:end', (ctx) => this.finish(ctx))
    this.addBind('tracing:apm:bee-queue:queue:connect:start', (ctx) => this.queueConnectStart(ctx))
    this.addBind('tracing:apm:bee-queue:queue:connect:error', (ctx) => this.error(ctx))
    this.addBind('tracing:apm:bee-queue:queue:connect:end', (ctx) => this.finish(ctx))
    this.addBind('tracing:apm:bee-queue:queue:connect:asyncEnd', (ctx) => this.finish(ctx))
    this.addSub('tracing:apm:bee-queue:queue:connect:end', (ctx) => this.finish(ctx))
    this.addSub('tracing:apm:bee-queue:queue:connect:asyncEnd', (ctx) => this.finish(ctx))

    // job.save spans for production
    this.addBind('tracing:apm:bee-queue:job:save:start', (ctx) => this.jobSaveStart(ctx))
    this.addBind('tracing:apm:bee-queue:job:save:error', (ctx) => this.error(ctx))
    this.addBind('tracing:apm:bee-queue:job:save:end', (ctx) => this.finish(ctx))
    this.addBind('tracing:apm:bee-queue:job:save:asyncEnd', (ctx) => this.finish(ctx))
    this.addSub('tracing:apm:bee-queue:job:save:end', (ctx) => this.finish(ctx))
    this.addSub('tracing:apm:bee-queue:job:save:asyncEnd', (ctx) => this.finish(ctx))
    this.addSub('tracing:apm:bee-queue:job:save:error', (ctx) => this.error(ctx))
  }

  queueCloseStart (ctx) {
    const tags = Extractors.queueCloseProducer(ctx)
    const options = {
      resource: tags['resource.name'] || 'close',
      meta: tags
    }
    return this.startSpan(options, ctx)
  }

  queueConnectStart (ctx) {
    const tags = Extractors.queueConnectProducer(ctx)
    const options = {
      resource: tags['resource.name'] || 'connect',
      meta: tags
    }
    return this.startSpan(options, ctx)
  }

  jobSaveStart (ctx) {
    const tags = {
      'messaging.system': 'bee-queue',
      'messaging.destination.name': ctx.self?.queue?.name || ctx.this?.queue?.name || 'unknown',
      'messaging.operation': 'produce'
    }
    const options = {
      resource: 'produce',
      meta: tags
    }
    return this.startSpan(options, ctx)
  }

  error (ctx) {
    const span = (ctx && ctx.currentStore && ctx.currentStore.span) || (ctx && ctx.parentStore && ctx.parentStore.span)
    if (span) {
      this.addError(span, ctx && ctx.error)
    }
    return ctx && ctx.parentStore
  }

  finish (ctx) {
    const span = ctx?.currentStore?.span
    if (span) {
      super.finish(ctx)
    }
    return ctx.parentStore
  }
}

module.exports = BeeQueueProducerPlugin
