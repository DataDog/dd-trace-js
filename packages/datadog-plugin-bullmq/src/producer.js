// AUTO-GENERATED by dd-compile from bullmq.analysis.json
// To customize plugin behavior, edit this file directly.
// Re-running dd-compile will show a diff but won't overwrite without confirmation.

'use strict'

const ProducerPlugin = require('../../dd-trace/src/plugins/producer')
const Extractors = require('./extractors')

class BullmqProducerPlugin extends ProducerPlugin {
  static get id () {
    return 'bullmq'
  }

  constructor (...args) {
    super(...args)
    this.subscribe()
  }

  subscribe () {
    this.addBind('tracing:apm:bullmq:queue:add:start', (ctx) => this.queueAddStart(ctx))
    this.addBind('tracing:apm:bullmq:queue:add:error', (ctx) => this.error(ctx))
    this.addBind('tracing:apm:bullmq:queue:add:end', (ctx) => this.finish(ctx))
    this.addBind('tracing:apm:bullmq:queue:add:asyncEnd', (ctx) => this.finish(ctx))
    this.addSub('tracing:apm:bullmq:queue:add:end', (ctx) => this.finish(ctx))
    this.addSub('tracing:apm:bullmq:queue:add:asyncEnd', (ctx) => this.finish(ctx))
  }

  queueAddStart (ctx) {
    const tags = Extractors.queueAddProducer(ctx)
    const name = 'bullmq.add'
    const options = {
      meta: tags,
      resource: tags['resource.name'] || 'add'
    }
    return this.startSpan(name, options, ctx)
  }

  error (ctx) {
    const span = ctx?.currentStore?.span
    if (span) {
      span.setTag('error', ctx.error)
    }
    return ctx.parentStore
  }

  finish (ctx) {
    const span = ctx?.currentStore?.span
    if (span) {
      super.finish(ctx)
    }
    return ctx.parentStore
  }
}

module.exports = BullmqProducerPlugin
