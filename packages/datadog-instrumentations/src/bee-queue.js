// AUTO-GENERATED by dd-compile from bee-queue.analysis.json
// To customize instrumentation behavior, edit this file directly.
// Re-running dd-compile will show a diff but won't overwrite without confirmation.

'use strict'

const { addHook } = require('./helpers/instrument')
const shimmer = require('../../datadog-shimmer')
const { createWrapper } = require('./helpers/wrappers')

addHook({ name: 'bee-queue', file: 'lib/queue.js', versions: ['>=1.0.0'] }, (exports) => {
  const PatchedClass = exports.default || exports.Queue || exports
  if (PatchedClass && PatchedClass.prototype && PatchedClass.prototype.process) {
    shimmer.wrap(PatchedClass.prototype, 'process', createWrapper('apm:bee-queue:queue:process', 'traceHandler'))
  }
  return exports
})

addHook({ name: 'bee-queue', file: 'lib/queue.js', versions: ['>=1.0.0'] }, (exports) => {
  const PatchedClass = exports.default || exports.Queue || exports
  if (PatchedClass && PatchedClass.prototype && PatchedClass.prototype.close) {
    shimmer.wrap(PatchedClass.prototype, 'close', createWrapper('apm:bee-queue:queue:close', 'traceSync'))
  }
  return exports
})

addHook({ name: 'bee-queue', file: 'lib/queue.js', versions: ['>=1.0.0'] }, (exports) => {
  const PatchedClass = exports.default || exports.Queue || exports
  if (PatchedClass && PatchedClass.prototype && PatchedClass.prototype.connect) {
    shimmer.wrap(PatchedClass.prototype, 'connect', createWrapper('apm:bee-queue:queue:connect', 'tracePromise'))
  }
  return exports
})

addHook({ name: 'bee-queue', file: 'lib/job.js', versions: ['>=1.0.0'] }, (exports) => {
  const PatchedClass = exports.default || exports.Job || exports
  if (PatchedClass && PatchedClass.prototype && PatchedClass.prototype.save) {
    shimmer.wrap(PatchedClass.prototype, 'save', createWrapper('apm:bee-queue:job:save', 'tracePromise'))
  }
  return exports
})
