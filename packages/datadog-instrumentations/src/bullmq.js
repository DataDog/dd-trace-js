// AUTO-GENERATED by dd-compile from bullmq.analysis.json
// To customize instrumentation behavior, edit this file directly.
// Re-running dd-compile will show a diff but won't overwrite without confirmation.

'use strict'

const { addHook } = require('./helpers/instrument')
const shimmer = require('../../datadog-shimmer')
const { tracingChannel } = require('dc-polyfill')

function createWrapper (channelName, operator) {
  const channel = tracingChannel(channelName)

  return function (original) {
    return function (...args) {
      if (!channel.start.hasSubscribers) {
        return original.apply(this, args)
      }

      const ctx = {
        self: this,
        arguments: args
      }

      if (operator === 'tracePromise') {
        return channel.tracePromise(original, ctx, this, ...args)
      } else if (operator === 'traceSync') {
        return channel.traceSync(original, ctx, this, ...args)
      }
      return original.apply(this, args)
    }
  }
}

function createEventWrapper (channelName, finishEventName) {
  const channel = tracingChannel(channelName)

  return function (original) {
    return function (...args) {
      const ctx = {
        this: this,
        args
      }

      const callback = args[args.length - 1]
      const eventName = args[args.length - 2]

      if (typeof callback !== 'function') {
        return original.apply(this, args)
      }

      if (eventName !== finishEventName) {
        return original.apply(this, args)
      }

      return channel.traceCallback(original, -1, ctx, this, ...args)
    }
  }
}

addHook({ name: 'bullmq', file: 'dist/cjs/classes/queue.js', versions: ['>=2.0.0'] }, (exports) => {
  const PatchedClass = exports.default || exports['Queue'] || exports
  if (PatchedClass && PatchedClass.prototype && PatchedClass.prototype['add']) {
    shimmer.wrap(PatchedClass.prototype, 'add', createWrapper('apm:bullmq:queue:add', 'tracePromise'))
  }
  return exports
})

addHook({ name: 'bullmq', file: 'dist/classes/queue.js', versions: ['>=1.0.0 <2.0.0'] }, (exports) => {
  const PatchedClass = exports.default || exports['Queue'] || exports
  if (PatchedClass && PatchedClass.prototype && PatchedClass.prototype['add']) {
    shimmer.wrap(PatchedClass.prototype, 'add', createWrapper('apm:bullmq:queue:add', 'tracePromise'))
  }
  return exports
})

addHook({ name: 'bullmq', file: 'dist/cjs/classes/worker.js', versions: ['>=2.0.0'] }, (exports) => {
  const PatchedClass = exports.default || exports['Worker'] || exports
  if (PatchedClass && PatchedClass.prototype && PatchedClass.prototype['on']) {
    shimmer.wrap(PatchedClass.prototype, 'on', createEventWrapper('apm:bullmq:worker:on', 'completed'))
  }
  return exports
})

addHook({ name: 'bullmq', file: 'dist/classes/worker.js', versions: ['>=1.0.0 <2.0.0'] }, (exports) => {
  const PatchedClass = exports.default || exports['Worker'] || exports
  if (PatchedClass && PatchedClass.prototype && PatchedClass.prototype['on']) {
    shimmer.wrap(PatchedClass.prototype, 'on', createEventWrapper('apm:bullmq:worker:on', 'completed'))
  }
  return exports
})
