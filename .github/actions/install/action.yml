name: Install dependencies
description: Install dependencies
inputs:
  cache:
    description: "Whether to enable caching of node_modules."
    required: false
    default: 'false'
runs:
  using: composite
  steps:
    - id: yarn-cache
      uses: actions/cache@v4
      with:
        key: yarn-cache-${{ github.workflow }}-${{ github.job }}-${{ hashFiles('yarn.lock') }}-v2
        path: node_modules.tar
      if: inputs.cache == 'true'
    - run: tar -xf node_modules.tar
      shell: bash
      if: inputs.cache == 'true' && steps.yarn-cache.outputs.cache-hit == 'true'
      # Retry in case of server error from registry.
      # Wait 60 seconds to give the registry server time to heal.
    - run: yarn install --frozen-lockfile --ignore-engines || sleep 60 && yarn install --frozen-lockfile --ignore-engines
      shell: bash
    - run: tar -cf node_modules.tar node_modules
      shell: bash
      if: inputs.cache == 'true' && steps.yarn-cache.outputs.cache-hit != 'true'
    - uses: ./.github/actions/push-junit
      with:
        dd-api-key: "wip"  # ${{ secrets.TEST_OPTIMIZATION_API_KEY }}
      # Convenient way of deploying push to test optim everywhere, without adding this step everywhere
      # It also ensure that no job will be forgotten, as long as it uses the .github/action/install action
      # The trick is as the .github/actions/push-junit performs the push as a post step, so after everything else
