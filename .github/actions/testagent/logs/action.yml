name: "Get APM Test Agent Logs"
description: "Get the APM Test Agent logs from the test run."
inputs:
  container-id:
    description: "ID of the Docker Container to get logs from (optional)"
    required: false
  suffix:
    description: "suffix of the artifact file name"
    required: false
runs:
  using: composite
  steps:
    - uses: actions/checkout@v2
    - name: Create Artifacts Directories
      run: |
        mkdir -p "./artifacts/logs"
        mkdir -p "./artifacts/supported-integrations"
      shell: bash
    - name: Save Test Agent Logs
      id: save_logs
      if:  runner.debug == '1' # only create test agent log artifacts if the github action has been re-run with debug mode
      env:
        SUFFIX: ${{ inputs.suffix }}
      run: |
        # Clean the suffix to derive the plugin name
        plugin="${SUFFIX}"
        plugin="${plugin/test-and-upstream-/}"
        plugin="${plugin/test-/}"
        plugin="${plugin/plugins-/}"
        plugin="${plugin/upstream-/}"

        echo "PLUGIN_NAME=${plugin}" >> $GITHUB_ENV

        if [ -n "${{inputs.container-id}}" ]; then
          docker logs "${{inputs.container-id}}" > "artifacts/logs/test_agent_logs_${plugin}.txt"
        else
          docker compose logs testagent > "artifacts/logs/test_agent_logs_${plugin}.txt"
        fi
      shell: bash
    - name: Archive Test Agent Logs
      if:  runner.debug == '1' # only create test agent log artifacts if the github action has been re-run with debug mode
      uses: actions/upload-artifact@v4
      with:
        name: "test_agent_logs_${{ env.PLUGIN_NAME }}"
        path: "./artifacts/logs"
    - name: Get Tested Integrations from Test Agent
      run: |
        # make temporary files to save response data to
        response=$(mktemp) && headers=$(mktemp)

        # get tested integrations
        curl -o "$response" -D "$headers" http://127.0.0.1:9126/test/integrations/tested_versions

        # get filename representing the name of the tested integration from headers
        filename=$(awk -F': ' '/file-name/{print $2}' "$headers" | tr -d '\r\n')

        # copy data to final file and remove temp files
        mv "$response" "artifacts/supported-integrations/${filename}_supported_versions.csv"
        rm "$headers"
      shell: bash
    - name: Archive Test Agent Tested Versions Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: "supported-integrations-${{ env.PLUGIN_NAME }}"
        path: "./artifacts/supported-integrations"