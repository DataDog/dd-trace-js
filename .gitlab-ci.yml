stages:
  - package
  - deploy
  - benchmarks
  - benchmarks-pr-comment
  - single-step-instrumentation-tests
  - manual_images

include:
  - remote: https://gitlab-templates.ddbuild.io/apm/packaging.yml
  - local: ".gitlab/benchmarks.yml"
  - local: ".gitlab/single-step-instrumentation-tests.yml"

variables:

  JS_PACKAGE_VERSION:
    description: "Version to build for .deb and .rpm. Must be already published in NPM"
  DOWNSTREAM_BRANCH:
    value: "master"
    description: "Run a specific datadog-reliability-env branch downstream"

.common: &common
  tags: [ "runner:main", "size:large" ]


package-snapshot:
  extends: .package
  stage: package
  rules:
    - if: $JS_PACKAGE_VERSION
      when: never
    - if: '$CI_COMMIT_TAG =~ /^v.*/'
      when: never
    - if: $CI_COMMIT_BRANCH == 'master'
      when: on_success
      allow_failure: true
    - when: manual
      allow_failure: true
  script:
   - |
      export CI_VERSION_SUFFIX=".pipeline.${CI_PIPELINE_ID}.beta.${CI_COMMIT_SHORT_SHA}"
      cd ..
      ./.gitlab/build-deb-rpm-snapshot.sh
      echo "done"

package-snapshot-arm:
  extends: .package-arm
  stage: package
  rules:
    - if: $JS_PACKAGE_VERSION
      when: never
    - if: '$CI_COMMIT_TAG =~ /^v.*/'
      when: never
    - if: $CI_COMMIT_BRANCH == 'master'
      when: on_success
      allow_failure: true
    - when: manual
      allow_failure: true
  script:
   - |
      export CI_VERSION_SUFFIX=".pipeline.${CI_PIPELINE_ID}.beta.${CI_COMMIT_SHORT_SHA}"
      cd ..
      ./.gitlab/build-deb-rpm-snapshot.sh
      echo "done"

package:
  extends: .package
  rules:
  - if: $JS_PACKAGE_VERSION
    when: on_success
  - if: '$CI_COMMIT_TAG =~ /^v.*/'
    when: on_success
  script:
    - ../.gitlab/build-deb-rpm.sh
    - find . -iregex '.*\.\(deb\|rpm\)' -printf '%f\0' | xargs -0 dd-pkg lint

package-arm:
  extends: .package-arm
  rules:
  - if: $JS_PACKAGE_VERSION
    when: on_success
  - if: '$CI_COMMIT_TAG =~ /^v.*/'
    when: on_success
  script:
    - ../.gitlab/build-deb-rpm.sh
    - find . -iregex '.*\.\(deb\|rpm\)' -printf '%f\0' | xargs -0 dd-pkg lint

.release-package:
  stage: deploy
  variables:
    PRODUCT_NAME: auto_inject-node
    PACKAGE_FILTER: js # product name is "node" but package name ends "js"

deploy_to_reliability_env:
  stage: deploy
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: on_success
    - when: manual
      allow_failure: true
  trigger:
    project: DataDog/apm-reliability/datadog-reliability-env
    branch: $DOWNSTREAM_BRANCH
  variables:
    UPSTREAM_BRANCH: $CI_COMMIT_REF_NAME
    UPSTREAM_PROJECT_ID: $CI_PROJECT_ID
    UPSTREAM_PROJECT_NAME: $CI_PROJECT_NAME
    UPSTREAM_COMMIT_SHA: $CI_COMMIT_SHA


generate-lib-init-tag-values:
  tags: ["arch:amd64"]
  image: registry.ddbuild.io/ci/auto_inject/gitlab:current
  stage: deploy
  rules:
    # We don't tag prerelease versions
    - if: '$CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+$/'
      when: on_success
    - when: manual
      allow_failure: true
  variables:
    IMG_DESTINATION_BASE: dd-lib-js-init
  script:
    - ./.gitlab/build-lib-init.sh
  artifacts:
    reports:
      dotenv: build.env

deploy-lib-init-trigger:
  stage: deploy
  # needs the version from the generate-tag-values job
  needs:
    - job: generate-lib-init-tag-values
      artifacts: true
  trigger:
#    project: DataDog/dd-trace-dotnet-gitlab-test # can be used for testing
    project: DataDog/public-images
    branch: main
    strategy: depend
  variables:
    IMG_SOURCES: ghcr.io/datadog/dd-trace-js/dd-lib-js-init:$CI_COMMIT_TAG
    IMG_DESTINATIONS: $IMG_DESTINATIONS
    IMG_SIGNING: "false"
    RETRY_COUNT: 5
    RETRY_DELAY: 300
