{
  "name": "dd_apm_scaffold",
  "description": "Generate complete APM integration projects from analysis reports. Creates production-ready instrumentation code, plugin classes, test suites, and documentation with automatic linting and subcategory-aware patterns.",
  "inputSchema": {
    "type": "object",
    "properties": {
      "report_path": {
        "type": "string",
        "description": "Path to the analysis report JSON file generated by dd-apm-analyze"
      },
      "integration_name": {
        "type": "string",
        "description": "Name of the integration (e.g., 'redis', 'axios-custom'). Used for file and class naming."
      },
      "language": {
        "type": "string",
        "enum": ["nodejs"],
        "default": "nodejs",
        "description": "Target language for scaffolding. Currently supports Node.js only."
      },
      "enable_llm": {
        "type": "boolean",
        "default": false,
        "description": "Enable LLM enhancement for generated code quality and verification. Requires DD_AI_GATEWAY or OPENAI_API_KEY."
      }
    },
    "required": ["report_path", "integration_name"]
  },
  "outputSchema": {
    "type": "object",
    "properties": {
      "success": {
        "type": "boolean",
        "description": "Whether the scaffolding completed successfully"
      },
      "integration_path": {
        "type": "string",
        "description": "Path to the root directory of the generated integration project"
      },
      "generated_files": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "path": {"type": "string"},
            "type": {"type": "string", "enum": ["instrumentation", "plugin", "test", "config", "docs"]},
            "linted": {"type": "boolean"},
            "enhanced": {"type": "boolean"}
          }
        },
        "description": "List of generated files with their types and processing status"
      },
      "plugin_info": {
        "type": "object",
        "properties": {
          "base_class": {
            "type": "string",
            "enum": ["HttpClientPlugin", "RouterPlugin", "Plugin", "CompositePlugin"],
            "description": "Base plugin class used based on detected category/subcategory"
          },
          "channels": {
            "type": "array",
            "items": {"type": "string"},
            "description": "Generated instrumentation channel names"
          }
        }
      },
      "test_info": {
        "type": "object",
        "properties": {
          "pattern": {
            "type": "string",
            "enum": ["http-client", "http-server", "database", "messaging-producer", "messaging-consumer"],
            "description": "Test pattern used based on detected subcategory"
          },
          "setup_type": {
            "type": "string",
            "description": "Type of test setup generated (e.g., 'server-for-client', 'mock-database')"
          }
        }
      }
    }
  },
  "examples": [
    {
      "description": "Basic HTTP client integration scaffolding",
      "input": {
        "report_path": "axios-analysis.json",
        "integration_name": "axios"
      },
      "output": {
        "success": true,
        "integration_path": "/path/to/packages/datadog-plugin-axios",
        "generated_files": [
          {"path": "packages/datadog-instrumentations/src/axios.js", "type": "instrumentation", "linted": true, "enhanced": false},
          {"path": "packages/datadog-plugin-axios/src/index.js", "type": "plugin", "linted": true, "enhanced": false},
          {"path": "packages/datadog-plugin-axios/test/index.spec.js", "type": "test", "linted": true, "enhanced": false}
        ],
        "plugin_info": {
          "base_class": "HttpClientPlugin",
          "channels": ["apm:axios:request:start", "apm:axios:request:finish", "apm:axios:request:error"]
        },
        "test_info": {
          "pattern": "http-client",
          "setup_type": "server-for-client"
        }
      }
    },
    {
      "description": "Enhanced messaging integration with LLM assistance",
      "input": {
        "report_path": "rabbitmq-analysis.json", 
        "integration_name": "rabbitmq",
        "enable_llm": true
      },
      "output": {
        "success": true,
        "integration_path": "/path/to/packages/datadog-plugin-rabbitmq",
        "generated_files": [
          {"path": "packages/datadog-instrumentations/src/rabbitmq.js", "type": "instrumentation", "linted": true, "enhanced": true},
          {"path": "packages/datadog-plugin-rabbitmq/src/index.js", "type": "plugin", "linted": true, "enhanced": true},
          {"path": "packages/datadog-plugin-rabbitmq/src/producer.js", "type": "plugin", "linted": true, "enhanced": true},
          {"path": "packages/datadog-plugin-rabbitmq/src/consumer.js", "type": "plugin", "linted": true, "enhanced": true},
          {"path": "packages/datadog-plugin-rabbitmq/test/index.spec.js", "type": "test", "linted": true, "enhanced": false}
        ],
        "plugin_info": {
          "base_class": "CompositePlugin",
          "channels": ["apm:rabbitmq:produce:start", "apm:rabbitmq:produce:finish", "apm:rabbitmq:receive:start", "apm:rabbitmq:receive:finish"]
        },
        "test_info": {
          "pattern": "messaging-producer",
          "setup_type": "rabbitmq-service"
        }
      }
    }
  ],
  "features": {
    "subcategory_aware": {
      "description": "Generates different code patterns based on detected subcategory",
      "examples": {
        "http-client": "Creates test server for client to make requests against",
        "http-server": "Creates supertest-based request testing",
        "messaging-producer": "Creates consumer setup for producer testing",
        "messaging-consumer": "Creates producer setup for consumer testing"
      }
    },
    "version_aware": {
      "description": "Handles API differences across library versions with conservative ranges and runtime detection"
    },
    "automatic_linting": {
      "description": "All generated files are automatically linted and formatted using ESLint"
    },
    "llm_enhancement": {
      "description": "Optional AI-powered code improvement, verification, and documentation generation"
    }
  },
  "environment": {
    "variables": {
      "DD_AI_GATEWAY": {
        "description": "Python AI gateway URL for LLM code enhancement",
        "required": false
      },
      "OPENAI_API_KEY": {
        "description": "OpenAI API key for direct LLM access",
        "required": false
      }
    },
    "requirements": {
      "node": ">=14.0.0",
      "eslint": "Available in project for automatic linting"
    }
  },
  "performance": {
    "typical_duration": "5-30 seconds",
    "factors": ["LLM enhancement usage", "Number of generated files", "Linting complexity"]
  }
}
