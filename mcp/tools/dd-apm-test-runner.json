{
  "name": "dd_apm_test_runner",
  "description": "Execute tests for generated APM integrations with optional service dependencies. Provides structured output suitable for LLM analysis and automated CI/CD workflows.",
  "inputSchema": {
    "type": "object", 
    "properties": {
      "plugin_id": {
        "type": "string",
        "description": "The normalized plugin ID to test (e.g., 'axios', 'redis', 'postgres'). Must match the generated plugin directory name."
      },
      "service": {
        "type": "string",
        "description": "Docker service name to start before testing (e.g., 'redis', 'postgres', 'mongodb'). Service must be defined in docker-compose.yml.",
        "examples": ["redis", "postgres", "mongodb", "rabbitmq", "elasticsearch"]
      },
      "cleanup": {
        "type": "boolean",
        "default": true,
        "description": "Whether to clean up Docker containers after tests complete. Set false for debugging."
      },
      "timeout_seconds": {
        "type": "number",
        "minimum": 30,
        "maximum": 3600,
        "default": 300,
        "description": "Test execution timeout in seconds. Increase for complex integrations."
      },
      "verbose": {
        "type": "boolean",
        "default": false,
        "description": "Enable detailed output including test logs and Docker operations."
      }
    },
    "required": ["plugin_id"]
  },
  "outputSchema": {
    "type": "object",
    "properties": {
      "success": {
        "type": "boolean",
        "description": "Whether all tests passed successfully"
      },
      "plugin_id": {
        "type": "string",
        "description": "The plugin ID that was tested"
      },
      "service": {
        "type": "string",
        "description": "Docker service used (if any)"
      },
      "duration_seconds": {
        "type": "number",
        "description": "Total test execution time in seconds"
      },
      "test_results": {
        "type": "object",
        "properties": {
          "passed": {"type": "number", "description": "Number of passed tests"},
          "failed": {"type": "number", "description": "Number of failed tests"},
          "skipped": {"type": "number", "description": "Number of skipped tests"},
          "total": {"type": "number", "description": "Total number of tests"}
        }
      },
      "service_info": {
        "type": "object",
        "properties": {
          "started": {"type": "boolean", "description": "Whether service was started successfully"},
          "ready_time_seconds": {"type": "number", "description": "Time taken for service to be ready"},
          "cleanup_performed": {"type": "boolean", "description": "Whether cleanup was performed"}
        }
      },
      "output_summary": {
        "type": "string",
        "description": "Human-readable summary of test results"
      },
      "detailed_output": {
        "type": "string",
        "description": "Full test execution output (when verbose=true)"
      },
      "errors": {
        "type": "array",
        "items": {"type": "string"},
        "description": "List of error messages encountered during execution"
      }
    }
  },
  "examples": [
    {
      "description": "Simple integration test without services",
      "input": {
        "plugin_id": "axios",
        "verbose": false
      },
      "output": {
        "success": true,
        "plugin_id": "axios",
        "service": null,
        "duration_seconds": 45.2,
        "test_results": {
          "passed": 12,
          "failed": 0,
          "skipped": 1,
          "total": 13
        },
        "service_info": null,
        "output_summary": "✅ All tests passed (12/13, 1 skipped)",
        "errors": []
      }
    },
    {
      "description": "Database integration test with Redis service",
      "input": {
        "plugin_id": "redis",
        "service": "redis",
        "timeout_seconds": 180,
        "verbose": true
      },
      "output": {
        "success": true,
        "plugin_id": "redis", 
        "service": "redis",
        "duration_seconds": 127.8,
        "test_results": {
          "passed": 24,
          "failed": 0,
          "skipped": 2,
          "total": 26
        },
        "service_info": {
          "started": true,
          "ready_time_seconds": 12.3,
          "cleanup_performed": true
        },
        "output_summary": "✅ All tests passed (24/26, 2 skipped) with Redis service",
        "detailed_output": "Starting Redis service...\n[Docker output]\nRunning tests...\n[Test output]",
        "errors": []
      }
    },
    {
      "description": "Failed test scenario",
      "input": {
        "plugin_id": "custom-integration",
        "service": "postgres"
      },
      "output": {
        "success": false,
        "plugin_id": "custom-integration",
        "service": "postgres", 
        "duration_seconds": 89.1,
        "test_results": {
          "passed": 8,
          "failed": 3,
          "skipped": 0,
          "total": 11
        },
        "service_info": {
          "started": true,
          "ready_time_seconds": 15.7,
          "cleanup_performed": true
        },
        "output_summary": "❌ 3 tests failed (8/11 passed) with Postgres service",
        "errors": [
          "Test 'should handle connection errors' failed: Expected 500 but got 200",
          "Test 'should trace query execution' failed: Span not found",
          "Test 'should handle transaction rollback' failed: Timeout after 5000ms"
        ]
      }
    }
  ],
  "workflow": {
    "steps": [
      {
        "step": 1,
        "description": "Service Startup",
        "details": "If service specified, run `docker-compose up -d {service}` and wait for readiness"
      },
      {
        "step": 2,
        "description": "Test Execution", 
        "details": "Run `PLUGINS={plugin-id} yarn test:plugins:ci` with specified timeout"
      },
      {
        "step": 3,
        "description": "Result Processing",
        "details": "Parse test output to extract pass/fail counts and error messages"
      },
      {
        "step": 4,
        "description": "Cleanup",
        "details": "Stop and remove Docker containers (unless cleanup=false)"
      }
    ]
  },
  "environment": {
    "requirements": {
      "node": ">=14.0.0",
      "docker": "Required for service dependencies",
      "docker-compose": "Required for service management",
      "yarn": "Required for test execution"
    },
    "project_structure": {
      "description": "Must be run from dd-trace project root with proper package structure",
      "required_files": [
        "docker-compose.yml",
        "package.json",
        "packages/datadog-plugin-{plugin-id}/test/"
      ]
    }
  },
  "performance": {
    "typical_duration": "30-600 seconds",
    "factors": [
      "Test complexity and count",
      "Service startup time", 
      "Network latency for Docker operations",
      "Integration-specific setup requirements"
    ]
  },
  "best_practices": {
    "service_usage": "Always use service dependencies for realistic integration testing",
    "timeout_setting": "Set timeouts 2-3x expected test duration for reliability",
    "cleanup_policy": "Only disable cleanup during active debugging sessions",
    "verbose_logging": "Enable verbose output when investigating test failures"
  }
}
